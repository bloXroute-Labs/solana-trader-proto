{
  "swagger": "2.0",
  "info": {
    "title": "Trader API",
    "description": "Easy-to-use API for interacting with trader services on the Solana blockchain, powered by bloXroute Labs.",
    "version": "1.6",
    "contact": {
      "name": "bloXroute Labs Trader API Documentation",
      "url": "https://docs.bloxroute.com/solana/trader-api",
      "email": "support@bloxroute.com"
    }
  },
  "tags": [
    {
      "name": "Api",
      "externalDocs": {
        "description": "Detailed API documentation",
        "url": "https://bloxroute.gitbook.io/serum-api/about/welcome"
      }
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/account/balance": {
      "get": {
        "summary": "Token balances",
        "description": "Returns the all token balances for a wallet",
        "operationId": "Api_GetAccountBalance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetAccountBalanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ownerAddress",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Account"
        ]
      }
    },
    "/api/v1/account/token-accounts": {
      "get": {
        "summary": "Token accounts with balances",
        "description": "Returns the all token accounts with their balances for a wallet",
        "operationId": "Api_GetTokenAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetTokenAccountsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ownerAddress",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Account"
        ]
      }
    },
    "/api/v1/market/depth/{market}": {
      "get": {
        "summary": "Market depth",
        "description": "Returns market's aggregated price data. Use limit param to reduce the number of price points returned",
        "operationId": "Api_GetMarketDepth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetMarketDepthResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "market",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Use 0 for no limits",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "P_UNKNOWN",
              "P_ALL",
              "P_JUPITER",
              "P_RAYDIUM",
              "P_SERUM",
              "P_OPENBOOK"
            ],
            "default": "P_UNKNOWN"
          }
        ],
        "tags": [
          "Market"
        ]
      }
    },
    "/api/v1/market/markets": {
      "get": {
        "summary": "Orderbook markets",
        "description": "Returns the list of orderbook markets",
        "operationId": "Api_GetMarkets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetMarketsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Market",
          "Orderbook"
        ]
      }
    },
    "/api/v1/market/orderbooks/{market}": {
      "get": {
        "summary": "Market orderbook",
        "description": "Returns market's orderbook. Use limit param to reduce the number of bids/asks returned",
        "operationId": "Api_GetOrderbook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetOrderbookResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "market",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Use 0 for no limits",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "P_UNKNOWN",
              "P_ALL",
              "P_JUPITER",
              "P_RAYDIUM",
              "P_SERUM",
              "P_OPENBOOK"
            ],
            "default": "P_UNKNOWN"
          }
        ],
        "tags": [
          "Market",
          "Orderbook"
        ]
      }
    },
    "/api/v1/market/pools": {
      "get": {
        "summary": "AMM Pools",
        "description": "Returns the list of supported AMM pools",
        "operationId": "Api_GetPools",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetPoolsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projects",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "P_UNKNOWN",
                "P_ALL",
                "P_JUPITER",
                "P_RAYDIUM",
                "P_SERUM",
                "P_OPENBOOK"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pairOrAddress",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Market",
          "AMM"
        ]
      }
    },
    "/api/v1/market/price": {
      "get": {
        "summary": "Token prices",
        "description": "Returns the list of prices for specified tokens",
        "operationId": "Api_GetPrice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetPriceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tokens",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Market",
          "Universal"
        ]
      }
    },
    "/api/v1/market/quote": {
      "get": {
        "summary": "AMM Quotes",
        "description": "Returns quotes from supported AMMs",
        "operationId": "Api_GetQuotes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetQuotesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "inToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "outToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "inAmount",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "slippage",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "projects",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "P_UNKNOWN",
                "P_ALL",
                "P_JUPITER",
                "P_RAYDIUM",
                "P_SERUM",
                "P_OPENBOOK"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Market",
          "AMM"
        ]
      }
    },
    "/api/v1/market/tickers/{market}": {
      "get": {
        "summary": "Orderbook tickers",
        "description": "Returns updated ticker(s). To receive all tickers use empty string for {market} param value",
        "operationId": "Api_GetTickers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetTickersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "market",
            "description": "Use empty string for all markets",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "P_UNKNOWN",
              "P_ALL",
              "P_JUPITER",
              "P_RAYDIUM",
              "P_SERUM",
              "P_OPENBOOK"
            ],
            "default": "P_UNKNOWN"
          }
        ],
        "tags": [
          "Market",
          "Orderbook"
        ]
      }
    },
    "/api/v1/system/blockhash": {
      "get": {
        "summary": "Recent block hash",
        "description": "Returns recent block hash",
        "operationId": "Api_GetRecentBlockHash",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetRecentBlockHashResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/api/v1/system/time": {
      "get": {
        "summary": "Server time",
        "description": "Returns current time on the server",
        "operationId": "Api_GetServerTime",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetServerTimeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/api/v1/trade/cancel": {
      "post": {
        "summary": "Unsigned CancelOrder transaction",
        "description": "Generates a CancelOrder unsigned transaction object",
        "operationId": "Api_PostCancelOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostCancelOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostCancelOrderRequest"
            }
          }
        ],
        "tags": [
          "Trade",
          "Orderbook"
        ]
      }
    },
    "/api/v1/trade/cancelall": {
      "post": {
        "summary": "Unsigned CancelAll transaction",
        "description": "Generates a CancelAll unsigned transaction object",
        "operationId": "Api_PostCancelAll",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostCancelAllResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostCancelAllRequest"
            }
          }
        ],
        "tags": [
          "Trade",
          "Orderbook"
        ]
      }
    },
    "/api/v1/trade/cancelbyid": {
      "post": {
        "summary": "Unsigned CancelOrderByID transaction",
        "description": "Generates a CancelOrderByID unsigned transaction object",
        "operationId": "Api_PostCancelByClientOrderID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostCancelOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostCancelByClientOrderIDRequest"
            }
          }
        ],
        "tags": [
          "Trade",
          "Orderbook"
        ]
      }
    },
    "/api/v1/trade/openorders/{market}": {
      "get": {
        "summary": "List of user's open orders",
        "description": "Returns the list of open orders per user per market",
        "operationId": "Api_GetOpenOrders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetOpenOrdersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "market",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Use 0 for no limits",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "address",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "openOrdersAddress",
            "description": "If left empty the Serum API will lookup the account which can be time consuming, Setting both address and openOrdersAddress is invalid, openOrdersAddress is preferred.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "P_UNKNOWN",
              "P_ALL",
              "P_JUPITER",
              "P_RAYDIUM",
              "P_SERUM",
              "P_OPENBOOK"
            ],
            "default": "P_UNKNOWN"
          }
        ],
        "tags": [
          "Trade",
          "Orderbook"
        ]
      }
    },
    "/api/v1/trade/place": {
      "post": {
        "summary": "Unsigned NewOrderV3 transaction",
        "description": "Generates a NewOrderV3 unsigned transaction object",
        "operationId": "Api_PostOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostOrderRequest"
            }
          }
        ],
        "tags": [
          "Trade",
          "Orderbook"
        ]
      }
    },
    "/api/v1/trade/replace": {
      "post": {
        "summary": "Unsigned ReplaceOrder transaction",
        "description": "Generates a ReplaceOrder unsigned transaction object",
        "operationId": "Api_PostReplaceOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostReplaceOrderRequest"
            }
          }
        ],
        "tags": [
          "Trade",
          "Orderbook"
        ]
      }
    },
    "/api/v1/trade/replacebyclientid": {
      "post": {
        "summary": "Unsigned ReplaceByClientOrderID transaction",
        "description": "Generates a ReplaceByClientOrderID unsigned transaction object",
        "operationId": "Api_PostReplaceByClientOrderID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostOrderRequest"
            }
          }
        ],
        "tags": [
          "Trade",
          "Orderbook"
        ]
      }
    },
    "/api/v1/trade/route-swap": {
      "post": {
        "summary": "Unsigned AMM swap transaction along route",
        "description": "Generates an unsigned transaction object for the AMM swap on the specified route",
        "operationId": "Api_PostRouteTradeSwap",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiTradeSwapResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiRouteTradeSwapRequest"
            }
          }
        ],
        "tags": [
          "Trade",
          "AMM"
        ]
      }
    },
    "/api/v1/trade/settle": {
      "post": {
        "summary": "Unsigned SettleFunds transaction",
        "description": "Generates a SettleFunds unsigned transaction object",
        "operationId": "Api_PostSettle",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostSettleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostSettleRequest"
            }
          }
        ],
        "tags": [
          "Trade",
          "Orderbook"
        ]
      }
    },
    "/api/v1/trade/submit": {
      "post": {
        "summary": "Transaction submit",
        "description": "Submits a signed transaction",
        "operationId": "Api_PostSubmit",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostSubmitResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostSubmitRequest"
            }
          }
        ],
        "tags": [
          "Trade",
          "Universal"
        ]
      }
    },
    "/api/v1/trade/submit-batch": {
      "post": {
        "summary": "Transaction batch submit",
        "description": "Submits a batch of signed transactions",
        "operationId": "Api_PostSubmitBatch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostSubmitBatchResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostSubmitBatchRequest"
            }
          }
        ],
        "tags": [
          "Trade",
          "Universal"
        ]
      }
    },
    "/api/v1/trade/swap": {
      "post": {
        "summary": "Unsigned best available AMM swap transaction",
        "description": "Generates an unsigned transaction object for the best available AMM swap",
        "operationId": "Api_PostTradeSwap",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiTradeSwapResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiTradeSwapRequest"
            }
          }
        ],
        "tags": [
          "Trade",
          "AMM"
        ]
      }
    },
    "/api/v1/trade/unsettled/{market}": {
      "get": {
        "summary": "Unsettled amounts",
        "description": "Returns the unsettled amounts of user in a market",
        "operationId": "Api_GetUnsettled",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetUnsettledResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "market",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ownerAddress",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "P_UNKNOWN",
              "P_ALL",
              "P_JUPITER",
              "P_RAYDIUM",
              "P_SERUM",
              "P_OPENBOOK"
            ],
            "default": "P_UNKNOWN"
          }
        ],
        "tags": [
          "Trade",
          "Orderbook"
        ]
      }
    },
    "/api/v2/balance": {
      "get": {
        "summary": "Token balances",
        "description": "Returns the all token balances for a wallet",
        "operationId": "Api_GetAccountBalanceV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetAccountBalanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ownerAddress",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Account"
        ]
      }
    },
    "/api/v2/jupiter/prices": {
      "get": {
        "summary": "Token prices on Jupiter",
        "description": "Returns the list of prices for specified tokens on Jupiter",
        "operationId": "Api_GetJupiterPrices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetJupiterPricesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tokens",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Jupiter V2"
        ]
      }
    },
    "/api/v2/jupiter/quotes": {
      "get": {
        "summary": "Jupiter Quotes",
        "description": "Returns quotes from Jupiter",
        "operationId": "Api_GetJupiterQuotes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetJupiterQuotesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "inToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "outToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "inAmount",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "slippage",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "fastMode",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Jupiter V2"
        ]
      }
    },
    "/api/v2/jupiter/route-swap": {
      "post": {
        "summary": "Unsigned Jupiter swap transaction along route",
        "description": "Generates an unsigned transaction object to make a swap on Jupiter on the specified route",
        "operationId": "Api_PostJupiterRouteSwap",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostJupiterRouteSwapResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostJupiterRouteSwapRequest"
            }
          }
        ],
        "tags": [
          "Jupiter V2"
        ]
      }
    },
    "/api/v2/jupiter/swap": {
      "post": {
        "summary": "Unsigned Jupiter swap transaction",
        "description": "Generates an unsigned transaction object to make a swap on Jupiter",
        "operationId": "Api_PostJupiterSwap",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostJupiterSwapResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostJupiterSwapRequest"
            }
          }
        ],
        "tags": [
          "Jupiter V2"
        ]
      }
    },
    "/api/v2/jupiter/swap-instructions": {
      "post": {
        "summary": "Unsigned Jupiter swap transaction from instructions",
        "description": "Generates an unsigned transaction object using jupiter instructions",
        "operationId": "Api_PostJupiterSwapInstructions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostJupiterSwapInstructionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostJupiterSwapInstructionsRequest"
            }
          }
        ],
        "tags": [
          "Jupiter V2"
        ]
      }
    },
    "/api/v2/mine-ore": {
      "post": {
        "summary": "Submit mine ore transactions",
        "description": "Submits two transactions in sequence for mining ore",
        "operationId": "Api_PostSubmitMineOre",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostSubmitResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostSubmitRequest"
            }
          }
        ],
        "tags": [
          "Ore"
        ]
      }
    },
    "/api/v2/openbook/cancel": {
      "post": {
        "summary": "Openbook unsigned CancelOrder transaction",
        "description": "Generates a CancelOrder unsigned transaction object",
        "operationId": "Api_PostCancelOrderV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostCancelOrderResponseV2"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostCancelOrderRequestV2"
            }
          }
        ],
        "tags": [
          "Openbook V2"
        ]
      }
    },
    "/api/v2/openbook/depth/{market}": {
      "get": {
        "summary": "Openbook market depth",
        "description": "Returns market's aggregated price data. Use limit param to reduce the number of price points returned",
        "operationId": "Api_GetMarketDepthV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetMarketDepthResponseV2"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "market",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Use 0 for no limits",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Openbook V2"
        ]
      }
    },
    "/api/v2/openbook/markets": {
      "get": {
        "summary": "Openbook markets",
        "description": "Returns the list of orderbook markets",
        "operationId": "Api_GetMarketsV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetMarketsResponseV2"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Openbook V2"
        ]
      }
    },
    "/api/v2/openbook/open-orders/{market}": {
      "get": {
        "summary": "List of user's open orders in Openbook",
        "description": "Returns the list of open orders per user per market",
        "operationId": "Api_GetOpenOrdersV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetOpenOrdersResponseV2"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "market",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Use 0 for no limits",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "address",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "openOrdersAddress",
            "description": "If left empty the Serum API will lookup the account which can be time consuming, Setting both address and openOrdersAddress is invalid, openOrdersAddress is preferred.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "clientOrderID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Openbook V2"
        ]
      }
    },
    "/api/v2/openbook/orderbooks/{market}": {
      "get": {
        "summary": "Openbook market orderbook",
        "description": "Returns market's orderbook. Use limit param to reduce the number of bids/asks returned",
        "operationId": "Api_GetOrderbookV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetOrderbookResponseV2"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "market",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Use 0 for no limits",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Openbook V2"
        ]
      }
    },
    "/api/v2/openbook/place": {
      "post": {
        "summary": "Openbook unsigned NewOrderV3 transaction",
        "description": "Generates a NewOrderV3 unsigned transaction object",
        "operationId": "Api_PostOrderV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostOrderRequestV2"
            }
          }
        ],
        "tags": [
          "Openbook V2"
        ]
      }
    },
    "/api/v2/openbook/replace": {
      "post": {
        "summary": "Openbook Unsigned ReplaceOrder transaction",
        "description": "Generates a ReplaceOrder unsigned transaction object",
        "operationId": "Api_PostReplaceOrderV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostReplaceOrderRequestV2"
            }
          }
        ],
        "tags": [
          "Openbook V2"
        ]
      }
    },
    "/api/v2/openbook/settle": {
      "post": {
        "summary": "Openbook unsigned SettleFunds transaction",
        "description": "Generates a SettleFunds unsigned transaction object",
        "operationId": "Api_PostSettleV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostSettleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostSettleRequestV2"
            }
          }
        ],
        "tags": [
          "Openbook V2"
        ]
      }
    },
    "/api/v2/openbook/tickers/{market}": {
      "get": {
        "summary": "Openbook tickers",
        "description": "Returns updated ticker(s). To receive all tickers use empty string for {market} param value",
        "operationId": "Api_GetTickersV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetTickersResponseV2"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "market",
            "description": "Use empty string for all markets",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Openbook V2"
        ]
      }
    },
    "/api/v2/openbook/unsettled/{market}": {
      "get": {
        "summary": "Unsettled amounts",
        "description": "Returns the unsettled amounts of user in a market",
        "operationId": "Api_GetUnsettledV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetUnsettledResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "market",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ownerAddress",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Openbook V2"
        ]
      }
    },
    "/api/v2/pumpfun/swap": {
      "post": {
        "operationId": "Api_PostPumpFunSwap",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostPumpFunSwapResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostPumpFunSwapRequest"
            }
          }
        ],
        "tags": [
          "AMMs"
        ]
      }
    },
    "/api/v2/rate-limit": {
      "get": {
        "summary": "Returns the details of an account rate limits",
        "description": "Returns the details of an account rate limits",
        "operationId": "Api_GetRateLimit",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetRateLimitResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Solana RPC"
        ]
      }
    },
    "/api/v2/raydium/pool-reserves": {
      "get": {
        "summary": "Raydium Pool reserve info",
        "description": "Returns the Raydium pool reserve info",
        "operationId": "Api_GetRaydiumPoolReserve",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetRaydiumPoolReserveResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pairsOrAddresses",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Raydium V2"
        ]
      }
    },
    "/api/v2/raydium/pools": {
      "get": {
        "summary": "Raydium Pools",
        "description": "Returns the list of Raydium pools",
        "operationId": "Api_GetRaydiumPools",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetRaydiumPoolsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Raydium V2"
        ]
      }
    },
    "/api/v2/raydium/prices": {
      "get": {
        "summary": "Token prices on Rayidum",
        "description": "Returns the list of prices for specified tokens on Raydium",
        "operationId": "Api_GetRaydiumPrices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetRaydiumPricesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tokens",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Raydium V2"
        ]
      }
    },
    "/api/v2/raydium/quotes": {
      "get": {
        "summary": "Raydium Quotes",
        "description": "Returns quotes from Raydium",
        "operationId": "Api_GetRaydiumQuotes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetRaydiumQuotesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "inToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "outToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "inAmount",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "slippage",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "tags": [
          "Raydium V2"
        ]
      }
    },
    "/api/v2/raydium/route-swap": {
      "post": {
        "summary": "Unsigned Raydium swap transaction along route",
        "description": "Generates an unsigned transaction object to make a swap on Raydium on the specified route",
        "operationId": "Api_PostRaydiumRouteSwap",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostRaydiumRouteSwapResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostRaydiumRouteSwapRequest"
            }
          }
        ],
        "tags": [
          "Raydium V2"
        ]
      }
    },
    "/api/v2/raydium/swap": {
      "post": {
        "summary": "Unsigned Raydium swap transaction",
        "description": "Generates an unsigned transaction object to make a swap on Raydium",
        "operationId": "Api_PostRaydiumSwap",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostRaydiumSwapResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostRaydiumSwapRequest"
            }
          }
        ],
        "tags": [
          "Raydium V2"
        ]
      }
    },
    "/api/v2/raydium/swap-instructions": {
      "post": {
        "summary": "Unsigned Raydium swap transaction from instructions",
        "description": "Generates an unsigned transaction object using raydium instructions",
        "operationId": "Api_PostRaydiumSwapInstructions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostRaydiumSwapInstructionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostRaydiumSwapInstructionsRequest"
            }
          }
        ],
        "tags": [
          "Raydium V2"
        ]
      }
    },
    "/api/v2/submit": {
      "post": {
        "summary": "Transaction submit",
        "description": "Submits a signed transaction",
        "operationId": "Api_PostSubmitV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostSubmitResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostSubmitRequest"
            }
          }
        ],
        "tags": [
          "Trade",
          "Universal"
        ]
      }
    },
    "/api/v2/submit-batch": {
      "post": {
        "summary": "Transaction batch submit",
        "description": "Submits a batch of signed transactions",
        "operationId": "Api_PostSubmitBatchV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostSubmitBatchResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostSubmitBatchRequest"
            }
          }
        ],
        "tags": [
          "Trade",
          "Universal"
        ]
      }
    },
    "/api/v2/system/priority-fee": {
      "get": {
        "summary": "Estimated priority fee",
        "description": "Returns an estimated prioritization fee based on recent transactions",
        "operationId": "Api_GetPriorityFee",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetPriorityFeeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "P_UNKNOWN",
              "P_ALL",
              "P_JUPITER",
              "P_RAYDIUM",
              "P_SERUM",
              "P_OPENBOOK"
            ],
            "default": "P_UNKNOWN"
          },
          {
            "name": "percentile",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "tags": [
          "System"
        ]
      }
    },
    "/api/v2/transaction": {
      "get": {
        "summary": "Returns the details of a transaction",
        "description": "Returns the details of a transaction",
        "operationId": "Api_GetTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetTransactionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "signature",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Solana RPC"
        ]
      }
    },
    "/api/v2/zeta/cross-margin-account": {
      "post": {
        "summary": "Zeta Markets Cross Margin Account Creation",
        "description": "Generates a `ZetaMarkets` Cross Margin Account through bloXroute Referral Program",
        "operationId": "Api_PostZetaCrossMarginAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostZetaCrossMarginAccountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostZetaCrossMarginAccountRequest"
            }
          }
        ],
        "tags": [
          "Zeta Markets"
        ]
      }
    }
  },
  "definitions": {
    "apiAccountMeta": {
      "type": "object",
      "properties": {
        "programID": {
          "type": "string"
        },
        "isSigner": {
          "type": "boolean"
        },
        "isWritable": {
          "type": "boolean"
        }
      }
    },
    "apiBlock": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "uint64"
        },
        "hash": {
          "type": "string"
        },
        "time": {
          "type": "string",
          "format": "int64"
        },
        "height": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "apiCandle": {
      "type": "object",
      "properties": {
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "updateTime": {
          "type": "string",
          "format": "date-time"
        },
        "open": {
          "type": "number",
          "format": "double"
        },
        "close": {
          "type": "number",
          "format": "double"
        },
        "low": {
          "type": "number",
          "format": "double"
        },
        "high": {
          "type": "number",
          "format": "double"
        },
        "amount": {
          "type": "number",
          "format": "double"
        },
        "volume": {
          "type": "number",
          "format": "double"
        },
        "count": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiDirection": {
      "type": "string",
      "enum": [
        "D_ASCENDING",
        "D_DESCENDING"
      ],
      "default": "D_ASCENDING"
    },
    "apiGetAccountBalanceResponse": {
      "type": "object",
      "properties": {
        "tokens": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTokenBalance"
          }
        }
      }
    },
    "apiGetBlockStreamResponse": {
      "type": "object",
      "properties": {
        "block": {
          "$ref": "#/definitions/apiBlock"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "apiGetBundleTipResponse": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "percentile25": {
          "type": "number",
          "format": "double"
        },
        "percentile50": {
          "type": "number",
          "format": "double"
        },
        "percentile75": {
          "type": "number",
          "format": "double"
        },
        "percentile95": {
          "type": "number",
          "format": "double"
        },
        "percentile99": {
          "type": "number",
          "format": "double"
        },
        "emaPercentile50": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiGetJupiterPricesResponse": {
      "type": "object",
      "properties": {
        "tokenPrices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTokenPriceV2"
          }
        }
      }
    },
    "apiGetJupiterQuotesResponse": {
      "type": "object",
      "properties": {
        "inToken": {
          "type": "string"
        },
        "inTokenAddress": {
          "type": "string"
        },
        "outToken": {
          "type": "string"
        },
        "outTokenAddress": {
          "type": "string"
        },
        "inAmount": {
          "type": "number",
          "format": "double"
        },
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiJupiterQuoteRoute"
          }
        }
      }
    },
    "apiGetKlineResponse": {
      "type": "object",
      "properties": {
        "market": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "candles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiCandle"
          }
        }
      }
    },
    "apiGetMarketDepthResponse": {
      "type": "object",
      "properties": {
        "market": {
          "type": "string"
        },
        "marketAddress": {
          "type": "string"
        },
        "bids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiMarketDepthItem"
          }
        },
        "asks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiMarketDepthItem"
          }
        }
      }
    },
    "apiGetMarketDepthResponseV2": {
      "type": "object",
      "properties": {
        "market": {
          "type": "string"
        },
        "marketAddress": {
          "type": "string"
        },
        "bids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiMarketDepthItemV2"
          }
        },
        "asks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiMarketDepthItemV2"
          }
        }
      }
    },
    "apiGetMarketDepthsStreamResponse": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "int64"
        },
        "Data": {
          "$ref": "#/definitions/apiGetMarketDepthResponse"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "apiGetMarketsResponse": {
      "type": "object",
      "properties": {
        "markets": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/apiMarket"
          }
        }
      }
    },
    "apiGetMarketsResponseV2": {
      "type": "object",
      "properties": {
        "markets": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/apiMarketV2"
          }
        }
      }
    },
    "apiGetNewRaydiumPoolsResponse": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "int64"
        },
        "pool": {
          "$ref": "#/definitions/apiProjectPool"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "apiGetOpenOrdersResponse": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiOrder"
          }
        }
      }
    },
    "apiGetOpenOrdersResponseV2": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiOrderV2"
          }
        }
      }
    },
    "apiGetOrderByIDResponse": {
      "type": "object",
      "properties": {
        "order": {
          "$ref": "#/definitions/apiOrder"
        }
      }
    },
    "apiGetOrderStatusResponse": {
      "type": "object",
      "properties": {
        "market": {
          "type": "string"
        },
        "openOrderAddress": {
          "type": "string"
        },
        "orderID": {
          "type": "string"
        },
        "clientOrderID": {
          "type": "string",
          "format": "uint64"
        },
        "quantityReleased": {
          "type": "number",
          "format": "float"
        },
        "quantityRemaining": {
          "type": "number",
          "format": "float"
        },
        "fillPrice": {
          "type": "number",
          "format": "float"
        },
        "side": {
          "$ref": "#/definitions/apiSide"
        },
        "orderStatus": {
          "$ref": "#/definitions/apiOrderStatus"
        },
        "orderPrice": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "apiGetOrderStatusStreamResponse": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "int64"
        },
        "orderInfo": {
          "$ref": "#/definitions/apiGetOrderStatusResponse"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "apiGetOrderbookResponse": {
      "type": "object",
      "properties": {
        "market": {
          "type": "string"
        },
        "marketAddress": {
          "type": "string"
        },
        "bids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiOrderbookItem"
          }
        },
        "asks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiOrderbookItem"
          }
        }
      }
    },
    "apiGetOrderbookResponseV2": {
      "type": "object",
      "properties": {
        "market": {
          "type": "string"
        },
        "marketAddress": {
          "type": "string"
        },
        "bids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiOrderbookItemV2"
          }
        },
        "asks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiOrderbookItemV2"
          }
        }
      }
    },
    "apiGetOrderbooksStreamResponse": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "int64"
        },
        "orderbook": {
          "$ref": "#/definitions/apiGetOrderbookResponse"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "apiGetOrdersResponse": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiOrder"
          }
        }
      }
    },
    "apiGetPoolReservesStreamResponse": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "int64"
        },
        "reserves": {
          "$ref": "#/definitions/apiPoolReserves"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "apiGetPoolsResponse": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiProjectPools"
          }
        }
      }
    },
    "apiGetPriceResponse": {
      "type": "object",
      "properties": {
        "tokenPrices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTokenPrice"
          }
        }
      }
    },
    "apiGetPricesStreamResponse": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "int64"
        },
        "price": {
          "$ref": "#/definitions/apiTokenPrice"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "apiGetPriorityFeeResponse": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/apiProject"
        },
        "percentile": {
          "type": "number",
          "format": "double"
        },
        "feeAtPercentile": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "apiGetPumpFunNewTokensStreamResponse": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "int64"
        },
        "txnHash": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        },
        "uri": {
          "type": "string"
        },
        "mint": {
          "type": "string"
        },
        "bondingCurve": {
          "type": "string"
        },
        "creator": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "apiGetPumpFunSwapsStreamResponse": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "int64"
        },
        "txnHash": {
          "type": "string"
        },
        "mintAddress": {
          "type": "string"
        },
        "userAddress": {
          "type": "string"
        },
        "userTokenAccountAddress": {
          "type": "string"
        },
        "bondingCurveAddress": {
          "type": "string"
        },
        "tokenVaultAddress": {
          "type": "string"
        },
        "solAmount": {
          "type": "string",
          "format": "uint64"
        },
        "tokenAmount": {
          "type": "string",
          "format": "uint64"
        },
        "isBuy": {
          "type": "boolean"
        },
        "virtualSolReserves": {
          "type": "string",
          "format": "uint64"
        },
        "virtualTokenReserves": {
          "type": "string",
          "format": "uint64"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "apiGetQuotesResponse": {
      "type": "object",
      "properties": {
        "inToken": {
          "type": "string"
        },
        "inTokenAddress": {
          "type": "string"
        },
        "outToken": {
          "type": "string"
        },
        "outTokenAddress": {
          "type": "string"
        },
        "inAmount": {
          "type": "number",
          "format": "double"
        },
        "quotes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiProjectQuote"
          }
        }
      }
    },
    "apiGetQuotesStreamResponse": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "int64"
        },
        "quote": {
          "$ref": "#/definitions/apiGetQuotesStreamUpdate"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "apiGetQuotesStreamUpdate": {
      "type": "object",
      "properties": {
        "inToken": {
          "type": "string"
        },
        "inTokenAddress": {
          "type": "string"
        },
        "outToken": {
          "type": "string"
        },
        "outTokenAddress": {
          "type": "string"
        },
        "inAmount": {
          "type": "number",
          "format": "double"
        },
        "outAmount": {
          "type": "number",
          "format": "double"
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        }
      }
    },
    "apiGetRateLimitResponse": {
      "type": "object",
      "properties": {
        "accountID": {
          "type": "string"
        },
        "tier": {
          "type": "string"
        },
        "interval": {
          "type": "string"
        },
        "intervalNum": {
          "type": "string",
          "format": "uint64"
        },
        "limit": {
          "type": "string",
          "format": "uint64"
        },
        "count": {
          "type": "string",
          "format": "uint64"
        },
        "reset": {
          "type": "string",
          "format": "uint64"
        },
        "streamInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiStreamInfo"
          }
        }
      }
    },
    "apiGetRaydiumPoolReserveResponse": {
      "type": "object",
      "properties": {
        "pools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiProjectPool"
          }
        }
      }
    },
    "apiGetRaydiumPoolsResponse": {
      "type": "object",
      "properties": {
        "pools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiProjectPool"
          }
        }
      }
    },
    "apiGetRaydiumPricesResponse": {
      "type": "object",
      "properties": {
        "tokenPrices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTokenPriceV2"
          }
        }
      }
    },
    "apiGetRaydiumQuotesResponse": {
      "type": "object",
      "properties": {
        "inToken": {
          "type": "string"
        },
        "inTokenAddress": {
          "type": "string"
        },
        "outToken": {
          "type": "string"
        },
        "outTokenAddress": {
          "type": "string"
        },
        "inAmount": {
          "type": "number",
          "format": "double"
        },
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiRaydiumQuoteRoute"
          }
        }
      }
    },
    "apiGetRecentBlockHashResponse": {
      "type": "object",
      "properties": {
        "blockHash": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "apiGetServerTimeResponse": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string"
        }
      }
    },
    "apiGetSwapsStreamResponse": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "int64"
        },
        "swap": {
          "$ref": "#/definitions/apiGetSwapsStreamUpdate"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "apiGetSwapsStreamUpdate": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        },
        "poolAddress": {
          "type": "string"
        },
        "inToken": {
          "type": "string"
        },
        "inTokenAddress": {
          "type": "string"
        },
        "outToken": {
          "type": "string"
        },
        "outTokenAddress": {
          "type": "string"
        },
        "inAmount": {
          "type": "number",
          "format": "double"
        },
        "outAmountMin": {
          "type": "number",
          "format": "double"
        },
        "sourceAccount": {
          "type": "string"
        },
        "destinationAccount": {
          "type": "string"
        },
        "ownerAccount": {
          "type": "string"
        },
        "signature": {
          "type": "string"
        }
      }
    },
    "apiGetTickersResponse": {
      "type": "object",
      "properties": {
        "tickers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTicker"
          }
        }
      }
    },
    "apiGetTickersResponseV2": {
      "type": "object",
      "properties": {
        "tickers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTickerV2"
          }
        }
      }
    },
    "apiGetTickersStreamResponse": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "int64"
        },
        "ticker": {
          "$ref": "#/definitions/apiGetTickersResponse"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "apiGetTokenAccountsResponse": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTokenAccount"
          }
        }
      }
    },
    "apiGetTradesResponse": {
      "type": "object",
      "properties": {
        "trades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTrade"
          }
        }
      }
    },
    "apiGetTradesStreamResponse": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "int64"
        },
        "trades": {
          "$ref": "#/definitions/apiGetTradesResponse"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "apiGetTransactionResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/apiTransactionMeta"
        },
        "slot": {
          "type": "string",
          "format": "uint64"
        },
        "blockTime": {
          "type": "string",
          "format": "uint64"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "apiGetUnsettledResponse": {
      "type": "object",
      "properties": {
        "market": {
          "type": "string"
        },
        "unsettled": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiUnsettledAccount"
          }
        }
      }
    },
    "apiGetZetaTransactionStreamResponse": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "int64"
        },
        "transaction": {
          "$ref": "#/definitions/apiTransactionZeta"
        },
        "meta": {
          "$ref": "#/definitions/apiTransactionMeta"
        }
      }
    },
    "apiInstruction": {
      "type": "object",
      "properties": {
        "programIdIndex": {
          "type": "integer",
          "format": "int64"
        },
        "accounts": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "data": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "apiInstructionJupiter": {
      "type": "object",
      "properties": {
        "programID": {
          "type": "string"
        },
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiAccountMeta"
          }
        },
        "data": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "apiInstructionRaydium": {
      "type": "object",
      "properties": {
        "programID": {
          "type": "string"
        },
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiAccountMeta"
          }
        },
        "data": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "apiJupiterQuoteRoute": {
      "type": "object",
      "properties": {
        "inAmount": {
          "type": "number",
          "format": "double"
        },
        "outAmount": {
          "type": "number",
          "format": "double"
        },
        "outAmountMin": {
          "type": "number",
          "format": "double"
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiJupiterQuoteStep"
          }
        }
      }
    },
    "apiJupiterQuoteStep": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/apiStepProject"
        },
        "inToken": {
          "type": "string"
        },
        "inTokenAddress": {
          "type": "string"
        },
        "outToken": {
          "type": "string"
        },
        "outTokenAddress": {
          "type": "string"
        },
        "inAmount": {
          "type": "number",
          "format": "double"
        },
        "outAmount": {
          "type": "number",
          "format": "double"
        },
        "slippage": {
          "type": "number",
          "format": "double"
        },
        "priceImpactPercent": {
          "$ref": "#/definitions/commonPriceImpactPercentV2"
        },
        "fee": {
          "$ref": "#/definitions/commonFee"
        },
        "outAmountMin": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiJupiterRouteStep": {
      "type": "object",
      "properties": {
        "inToken": {
          "type": "string"
        },
        "inAmount": {
          "type": "number",
          "format": "double"
        },
        "outToken": {
          "type": "string"
        },
        "outAmount": {
          "type": "number",
          "format": "double"
        },
        "outAmountMin": {
          "type": "number",
          "format": "double"
        },
        "project": {
          "$ref": "#/definitions/apiStepProject"
        },
        "fee": {
          "$ref": "#/definitions/commonFee"
        }
      }
    },
    "apiLiquidityPoolKeys": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "baseMint": {
          "type": "string"
        },
        "quoteMint": {
          "type": "string"
        },
        "lpMint": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int64"
        },
        "programID": {
          "type": "string"
        },
        "authority": {
          "type": "string"
        },
        "baseVault": {
          "type": "string"
        },
        "quoteVault": {
          "type": "string"
        },
        "lpVault": {
          "type": "string"
        },
        "openOrders": {
          "type": "string"
        },
        "targetOrders": {
          "type": "string"
        },
        "withdrawQueue": {
          "type": "string"
        },
        "marketVersion": {
          "type": "integer",
          "format": "int64"
        },
        "marketProgramID": {
          "type": "string"
        },
        "marketID": {
          "type": "string"
        },
        "marketAuthority": {
          "type": "string"
        },
        "marketBaseVault": {
          "type": "string"
        },
        "marketQuoteVault": {
          "type": "string"
        },
        "marketBids": {
          "type": "string"
        },
        "marketAsks": {
          "type": "string"
        },
        "marketEventQueue": {
          "type": "string"
        },
        "tradeFeeRate": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "apiMarket": {
      "type": "object",
      "properties": {
        "market": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/apiMarketStatus"
        },
        "address": {
          "type": "string"
        },
        "baseMint": {
          "type": "string"
        },
        "quotedMint": {
          "type": "string"
        },
        "baseDecimals": {
          "type": "string",
          "format": "int64"
        },
        "quoteDecimals": {
          "type": "string",
          "format": "int64"
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        }
      }
    },
    "apiMarketDepthItem": {
      "type": "object",
      "properties": {
        "price": {
          "type": "number",
          "format": "double"
        },
        "size": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiMarketDepthItemV2": {
      "type": "object",
      "properties": {
        "price": {
          "type": "number",
          "format": "double"
        },
        "size": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiMarketStatus": {
      "type": "string",
      "enum": [
        "MS_UNKNOWN",
        "MS_ONLINE"
      ],
      "default": "MS_UNKNOWN"
    },
    "apiMarketV2": {
      "type": "object",
      "properties": {
        "market": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "baseMint": {
          "type": "string"
        },
        "quotedMint": {
          "type": "string"
        },
        "baseDecimals": {
          "type": "string",
          "format": "int64"
        },
        "quoteDecimals": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "apiOrder": {
      "type": "object",
      "properties": {
        "orderID": {
          "type": "string"
        },
        "market": {
          "type": "string"
        },
        "side": {
          "$ref": "#/definitions/apiSide"
        },
        "types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonOrderType"
          }
        },
        "price": {
          "type": "number",
          "format": "double"
        },
        "remainingSize": {
          "type": "number",
          "format": "double"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "clientOrderID": {
          "type": "string"
        },
        "openOrderAccount": {
          "type": "string"
        }
      }
    },
    "apiOrderStatus": {
      "type": "string",
      "enum": [
        "OS_UNKNOWN",
        "OS_OPEN",
        "OS_PARTIAL_FILL",
        "OS_CANCELLED",
        "OS_FILLED"
      ],
      "default": "OS_UNKNOWN"
    },
    "apiOrderV2": {
      "type": "object",
      "properties": {
        "orderID": {
          "type": "string"
        },
        "market": {
          "type": "string"
        },
        "side": {
          "type": "string",
          "description": " Supported values : Bid, Ask",
          "required": [
            "side"
          ]
        },
        "type": {
          "type": "string",
          "description": "Supported values : Limit, IoC, PostOnly",
          "required": [
            "type"
          ]
        },
        "price": {
          "type": "number",
          "format": "double"
        },
        "remainingSize": {
          "type": "number",
          "format": "double"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "clientOrderID": {
          "type": "string"
        },
        "openOrderAccount": {
          "type": "string"
        }
      },
      "required": [
        "side",
        "type"
      ]
    },
    "apiOrderbookItem": {
      "type": "object",
      "properties": {
        "price": {
          "type": "number",
          "format": "double"
        },
        "size": {
          "type": "number",
          "format": "double"
        },
        "orderID": {
          "type": "string",
          "description": "Serum generated OrderID"
        },
        "clientOrderID": {
          "type": "string",
          "format": "uint64"
        },
        "ownerAddress": {
          "type": "string",
          "description": "OpenOrders address for current market"
        }
      }
    },
    "apiOrderbookItemV2": {
      "type": "object",
      "properties": {
        "price": {
          "type": "number",
          "format": "double"
        },
        "size": {
          "type": "number",
          "format": "double"
        },
        "orderID": {
          "type": "string",
          "description": "Serum generated OrderID"
        },
        "clientOrderID": {
          "type": "string",
          "format": "uint64"
        },
        "ownerAddress": {
          "type": "string",
          "description": "OpenOrders address for current market"
        }
      }
    },
    "apiPoolReserves": {
      "type": "object",
      "properties": {
        "token1Reserves": {
          "type": "string"
        },
        "token1Address": {
          "type": "string"
        },
        "token2Reserves": {
          "type": "string"
        },
        "token2Address": {
          "type": "string"
        },
        "poolAddress": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        }
      }
    },
    "apiPostCancelAllRequest": {
      "type": "object",
      "properties": {
        "market": {
          "type": "string",
          "required": [
            "market"
          ]
        },
        "ownerAddress": {
          "type": "string",
          "required": [
            "ownerAddress"
          ]
        },
        "openOrdersAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "computeLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Optional: specifies total compute limit to be allocated for all instructions within the created tx"
        },
        "computePrice": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: specifies compute price in microlamports to be included as a part of instruction, known as priority fee"
        },
        "tip": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: Specifies a tip amount that will be used to pay for front-running protection and/or bundle submission services. Minimum value is 1025"
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        }
      },
      "required": [
        "market",
        "ownerAddress"
      ]
    },
    "apiPostCancelAllResponse": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTransactionMessage"
          }
        }
      }
    },
    "apiPostCancelByClientOrderIDRequest": {
      "type": "object",
      "properties": {
        "clientOrderID": {
          "type": "string",
          "format": "uint64",
          "required": [
            "clientOrderID"
          ]
        },
        "marketAddress": {
          "type": "string",
          "required": [
            "marketAddress"
          ]
        },
        "ownerAddress": {
          "type": "string",
          "required": [
            "ownerAddress"
          ]
        },
        "openOrdersAddress": {
          "type": "string",
          "required": [
            "openOrdersAddress"
          ]
        },
        "computeLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Optional: specifies total compute limit to be allocated for all instructions within the created tx"
        },
        "computePrice": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: specifies compute price in microlamports to be included as a part of instruction, known as priority fee"
        },
        "tip": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: Specifies a tip amount that will be used to pay for front-running protection and/or bundle submission services. Minimum value is 1025"
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        }
      },
      "required": [
        "clientOrderID",
        "marketAddress",
        "ownerAddress",
        "openOrdersAddress"
      ]
    },
    "apiPostCancelOrderRequest": {
      "type": "object",
      "properties": {
        "orderID": {
          "type": "string",
          "required": [
            "orderID"
          ]
        },
        "side": {
          "$ref": "#/definitions/apiSide"
        },
        "marketAddress": {
          "type": "string",
          "required": [
            "marketAddress"
          ]
        },
        "ownerAddress": {
          "type": "string",
          "required": [
            "ownerAddress"
          ]
        },
        "openOrdersAddress": {
          "type": "string",
          "required": [
            "openOrdersAddress"
          ]
        },
        "computeLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Optional: specifies total compute limit to be allocated for all instructions within the created tx"
        },
        "computePrice": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: specifies compute price in microlamports to be included as a part of instruction, known as priority fee"
        },
        "tip": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: Specifies a tip amount that will be used to pay for front-running protection and/or bundle submission services. Minimum value is 1025"
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        }
      },
      "required": [
        "orderID",
        "marketAddress",
        "ownerAddress",
        "openOrdersAddress"
      ]
    },
    "apiPostCancelOrderRequestV2": {
      "type": "object",
      "properties": {
        "orderID": {
          "type": "string"
        },
        "side": {
          "type": "string",
          "description": " Supported values : Bid, Ask",
          "required": [
            "side"
          ]
        },
        "marketAddress": {
          "type": "string",
          "required": [
            "marketAddress"
          ]
        },
        "ownerAddress": {
          "type": "string",
          "required": [
            "ownerAddress"
          ]
        },
        "openOrdersAddress": {
          "type": "string",
          "required": [
            "openOrdersAddress"
          ]
        },
        "clientOrderID": {
          "type": "string",
          "format": "uint64"
        },
        "computeLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Optional: specifies total compute limit to be allocated for all instructions within the created tx"
        },
        "computePrice": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: specifies compute price in microlamports to be included as a part of instruction, known as priority fee"
        },
        "tip": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: Specifies a tip amount that will be used to pay for front-running protection and/or bundle submission services. Minimum value is 1025"
        }
      },
      "required": [
        "side",
        "marketAddress",
        "ownerAddress",
        "openOrdersAddress"
      ]
    },
    "apiPostCancelOrderResponse": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/apiTransactionMessage"
        }
      }
    },
    "apiPostCancelOrderResponseV2": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTransactionMessage"
          }
        }
      }
    },
    "apiPostJupiterRouteSwapRequest": {
      "type": "object",
      "properties": {
        "ownerAddress": {
          "type": "string"
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiJupiterRouteStep"
          }
        },
        "slippage": {
          "type": "number",
          "format": "double"
        },
        "computeLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Optional: specifies total compute limit to be allocated for all instructions within the created tx"
        },
        "computePrice": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: specifies compute price in microlamports to be included as a part of instruction, known as priority fee"
        },
        "tip": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: Specifies a tip amount that will be used to pay for front-running protection and/or bundle submission services. Minimum value is 1025"
        }
      }
    },
    "apiPostJupiterRouteSwapResponse": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTransactionMessage"
          }
        },
        "outAmount": {
          "type": "number",
          "format": "double"
        },
        "outAmountMin": {
          "type": "number",
          "format": "double"
        },
        "priceImpact": {
          "$ref": "#/definitions/commonPriceImpactPercentV2"
        },
        "fees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonFee"
          }
        }
      }
    },
    "apiPostJupiterSwapInstructionsRequest": {
      "type": "object",
      "properties": {
        "ownerAddress": {
          "type": "string"
        },
        "inToken": {
          "type": "string"
        },
        "outToken": {
          "type": "string"
        },
        "inAmount": {
          "type": "number",
          "format": "double"
        },
        "slippage": {
          "type": "number",
          "format": "double"
        },
        "computePrice": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: specifies compute price in microlamports to be included as a part of instruction, known as priority fee"
        },
        "tip": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: Specifies a tip amount that will be used to pay for front-running protection and/or bundle submission services. Minimum value is 1025"
        },
        "fastMode": {
          "type": "boolean"
        }
      }
    },
    "apiPostJupiterSwapInstructionsResponse": {
      "type": "object",
      "properties": {
        "instructions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiInstructionJupiter"
          }
        },
        "addressLookupTableAddresses": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/apiPublicKeys"
          },
          "description": "Returns a map[publicKey][]publicKey that is used in solana versioned transaction creation."
        },
        "outAmount": {
          "type": "number",
          "format": "double"
        },
        "outAmountMin": {
          "type": "number",
          "format": "double"
        },
        "priceImpact": {
          "$ref": "#/definitions/commonPriceImpactPercentV2"
        },
        "fees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonFee"
          }
        }
      }
    },
    "apiPostJupiterSwapRequest": {
      "type": "object",
      "properties": {
        "ownerAddress": {
          "type": "string"
        },
        "inToken": {
          "type": "string"
        },
        "outToken": {
          "type": "string"
        },
        "inAmount": {
          "type": "number",
          "format": "double"
        },
        "slippage": {
          "type": "number",
          "format": "double"
        },
        "computeLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Optional: specifies total compute limit to be allocated for all instructions within the created tx"
        },
        "computePrice": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: specifies compute price in microlamports to be included as a part of instruction, known as priority fee"
        },
        "tip": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: Specifies a tip amount that will be used to pay for front-running protection and/or bundle submission services. Minimum value is 1025"
        },
        "fastMode": {
          "type": "boolean"
        }
      }
    },
    "apiPostJupiterSwapResponse": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTransactionMessage"
          }
        },
        "outAmount": {
          "type": "number",
          "format": "double"
        },
        "outAmountMin": {
          "type": "number",
          "format": "double"
        },
        "priceImpact": {
          "$ref": "#/definitions/commonPriceImpactPercentV2"
        },
        "fees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonFee"
          }
        }
      }
    },
    "apiPostOrderRequest": {
      "type": "object",
      "properties": {
        "ownerAddress": {
          "type": "string",
          "required": [
            "ownerAddress"
          ]
        },
        "payerAddress": {
          "type": "string",
          "required": [
            "payerAddress"
          ]
        },
        "market": {
          "type": "string",
          "required": [
            "market"
          ]
        },
        "side": {
          "$ref": "#/definitions/apiSide"
        },
        "type": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonOrderType"
          },
          "required": [
            "type"
          ]
        },
        "amount": {
          "type": "number",
          "format": "double",
          "required": [
            "amount"
          ]
        },
        "price": {
          "type": "number",
          "format": "double",
          "required": [
            "price"
          ]
        },
        "openOrdersAddress": {
          "type": "string",
          "description": "If left empty the Openbook API will lookup the account which can be time consuming"
        },
        "clientOrderID": {
          "type": "string",
          "format": "uint64",
          "description": "Client defined OrderID"
        },
        "computeLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Optional: specifies total compute limit to be allocated for all instructions within the created tx"
        },
        "computePrice": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: specifies compute price in microlamports to be included as a part of instruction, known as priority fee"
        },
        "tip": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: specifies a tip amount that can be sent to bundle multiple transactions. Minimum value is 1025."
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        }
      },
      "required": [
        "ownerAddress",
        "payerAddress",
        "market",
        "type",
        "amount",
        "price"
      ]
    },
    "apiPostOrderRequestV2": {
      "type": "object",
      "properties": {
        "ownerAddress": {
          "type": "string",
          "required": [
            "ownerAddress"
          ]
        },
        "payerAddress": {
          "type": "string",
          "required": [
            "payerAddress"
          ]
        },
        "market": {
          "type": "string",
          "required": [
            "market"
          ]
        },
        "side": {
          "type": "string",
          "description": " Supported values : Bid, Ask",
          "required": [
            "side"
          ]
        },
        "type": {
          "type": "string",
          "description": "Supported values : Limit, IoC, PostOnly",
          "required": [
            "type"
          ]
        },
        "amount": {
          "type": "number",
          "format": "double",
          "required": [
            "amount"
          ]
        },
        "price": {
          "type": "number",
          "format": "double",
          "required": [
            "price"
          ]
        },
        "openOrdersAddress": {
          "type": "string",
          "description": "If left empty the Serum API will lookup the account which can be time consuming"
        },
        "clientOrderID": {
          "type": "string",
          "format": "uint64",
          "description": "Client defined OrderID"
        },
        "computeLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Optional: specifies total compute limit to be allocated for all instructions within the created tx"
        },
        "computePrice": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: specifies compute price in microlamports to be included as a part of instruction, known as priority fee"
        },
        "tip": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: Specifies a tip amount that will be used to pay for front-running protection and/or bundle submission services. Minimum value is 1025"
        }
      },
      "required": [
        "ownerAddress",
        "payerAddress",
        "market",
        "side",
        "type",
        "amount",
        "price"
      ]
    },
    "apiPostOrderResponse": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/apiTransactionMessage"
        },
        "openOrdersAddress": {
          "type": "string"
        }
      }
    },
    "apiPostPumpFunSwapRequest": {
      "type": "object",
      "properties": {
        "userAddress": {
          "type": "string"
        },
        "bondingCurveAddress": {
          "type": "string"
        },
        "tokenAddress": {
          "type": "string"
        },
        "tokenAmount": {
          "type": "number",
          "format": "double"
        },
        "solThreshold": {
          "type": "number",
          "format": "double"
        },
        "isBuy": {
          "type": "boolean"
        },
        "computeLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Optional: specifies total compute limit to be allocated for all instructions within the created tx"
        },
        "computePrice": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: specifies compute price in microlamports to be included as a part of instruction, known as priority fee"
        },
        "tip": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: Specifies a tip amount that will be used to pay for front-running protection and/or bundle submission services. Minimum value is 1025"
        }
      }
    },
    "apiPostPumpFunSwapResponse": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/apiTransactionMessage"
        }
      }
    },
    "apiPostRaydiumRouteSwapRequest": {
      "type": "object",
      "properties": {
        "ownerAddress": {
          "type": "string"
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiRaydiumRouteStep"
          }
        },
        "slippage": {
          "type": "number",
          "format": "double"
        },
        "computeLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Optional: specifies total compute limit to be allocated for all instructions within the created tx"
        },
        "computePrice": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: specifies compute price in microlamports to be included as a part of instruction, known as priority fee"
        },
        "tip": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: Specifies a tip amount that will be used to pay for front-running protection and/or bundle submission services. Minimum value is 1025"
        }
      }
    },
    "apiPostRaydiumRouteSwapResponse": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTransactionMessage"
          }
        },
        "outAmount": {
          "type": "number",
          "format": "double"
        },
        "outAmountMin": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiPostRaydiumSwapInstructionsRequest": {
      "type": "object",
      "properties": {
        "ownerAddress": {
          "type": "string"
        },
        "inToken": {
          "type": "string"
        },
        "outToken": {
          "type": "string"
        },
        "inAmount": {
          "type": "number",
          "format": "double"
        },
        "slippage": {
          "type": "number",
          "format": "double"
        },
        "computeLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Optional: specifies total compute limit to be allocated for all instructions within the created tx"
        },
        "computePrice": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: specifies compute price in microlamports to be included as a part of instruction, known as priority fee"
        },
        "tip": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: Specifies a tip amount that will be used to pay for front-running protection and/or bundle submission services. Minimum value is 1025"
        }
      }
    },
    "apiPostRaydiumSwapInstructionsResponse": {
      "type": "object",
      "properties": {
        "instructions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiInstructionRaydium"
          }
        },
        "outAmount": {
          "type": "number",
          "format": "double"
        },
        "outAmountMin": {
          "type": "number",
          "format": "double"
        },
        "priceImpact": {
          "$ref": "#/definitions/commonPriceImpactPercentV2"
        },
        "fees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonFee"
          }
        }
      }
    },
    "apiPostRaydiumSwapRequest": {
      "type": "object",
      "properties": {
        "ownerAddress": {
          "type": "string"
        },
        "inToken": {
          "type": "string"
        },
        "outToken": {
          "type": "string"
        },
        "inAmount": {
          "type": "number",
          "format": "double"
        },
        "slippage": {
          "type": "number",
          "format": "double"
        },
        "computeLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Optional: specifies total compute limit to be allocated for all instructions within the created tx"
        },
        "computePrice": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: specifies compute price in microlamports to be included as a part of instruction, known as priority fee"
        },
        "tip": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: Specifies a tip amount that will be used to pay for front-running protection and/or bundle submission services. Minimum value is 1025"
        }
      }
    },
    "apiPostRaydiumSwapResponse": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTransactionMessage"
          }
        },
        "outAmount": {
          "type": "number",
          "format": "double"
        },
        "outAmountMin": {
          "type": "number",
          "format": "double"
        },
        "priceImpact": {
          "$ref": "#/definitions/commonPriceImpactPercentV2"
        },
        "fees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonFee"
          }
        }
      }
    },
    "apiPostReplaceOrderRequest": {
      "type": "object",
      "properties": {
        "ownerAddress": {
          "type": "string",
          "required": [
            "ownerAddress"
          ]
        },
        "payerAddress": {
          "type": "string",
          "required": [
            "payerAddress"
          ]
        },
        "market": {
          "type": "string",
          "required": [
            "market"
          ]
        },
        "side": {
          "$ref": "#/definitions/apiSide"
        },
        "type": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonOrderType"
          },
          "required": [
            "type"
          ]
        },
        "amount": {
          "type": "number",
          "format": "double",
          "required": [
            "amount"
          ]
        },
        "price": {
          "type": "number",
          "format": "double",
          "required": [
            "price"
          ]
        },
        "openOrdersAddress": {
          "type": "string",
          "description": "If left empty the Serum API will lookup the account which can be time consuming",
          "required": [
            "openOrdersAddress"
          ]
        },
        "clientOrderID": {
          "type": "string",
          "format": "uint64"
        },
        "orderID": {
          "type": "string",
          "description": "Openbook generated OrderID"
        },
        "computeLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Optional: specifies total compute limit to be allocated for all instructions within the created tx"
        },
        "computePrice": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: specifies compute price in microlamports to be included as a part of instruction, known as priority fee"
        },
        "tip": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: Specifies a tip amount that will be used to pay for front-running protection and/or bundle submission services. Minimum value is 1025"
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        }
      },
      "required": [
        "ownerAddress",
        "payerAddress",
        "market",
        "type",
        "amount",
        "price",
        "openOrdersAddress"
      ]
    },
    "apiPostReplaceOrderRequestV2": {
      "type": "object",
      "properties": {
        "ownerAddress": {
          "type": "string",
          "required": [
            "ownerAddress"
          ]
        },
        "payerAddress": {
          "type": "string",
          "required": [
            "payerAddress"
          ]
        },
        "market": {
          "type": "string",
          "required": [
            "market"
          ]
        },
        "side": {
          "type": "string",
          "description": " Supported values : Bid, Ask",
          "required": [
            "side"
          ]
        },
        "type": {
          "type": "string",
          "description": "Supported values : Limit, IoC, PostOnly",
          "required": [
            "type"
          ]
        },
        "amount": {
          "type": "number",
          "format": "double",
          "required": [
            "amount"
          ]
        },
        "price": {
          "type": "number",
          "format": "double",
          "required": [
            "price"
          ]
        },
        "openOrdersAddress": {
          "type": "string",
          "description": "If left empty the Serum API will lookup the account which can be time consuming",
          "required": [
            "openOrdersAddress"
          ]
        },
        "clientOrderID": {
          "type": "string",
          "format": "uint64",
          "description": "Client defined OrderID"
        },
        "orderID": {
          "type": "string",
          "description": "Openbook generated OrderID"
        },
        "computeLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Optional: specifies total compute limit to be allocated for all instructions within the created tx"
        },
        "computePrice": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: specifies compute price in microlamports to be included as a part of instruction, known as priority fee"
        },
        "tip": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: Specifies a tip amount that will be used to pay for front-running protection and/or bundle submission services. Minimum value is 1025"
        }
      },
      "required": [
        "ownerAddress",
        "payerAddress",
        "market",
        "side",
        "type",
        "amount",
        "price",
        "openOrdersAddress"
      ]
    },
    "apiPostSettleRequest": {
      "type": "object",
      "properties": {
        "ownerAddress": {
          "type": "string",
          "required": [
            "ownerAddress"
          ]
        },
        "market": {
          "type": "string",
          "required": [
            "market"
          ]
        },
        "baseTokenWallet": {
          "type": "string",
          "required": [
            "baseTokenWallet"
          ]
        },
        "quoteTokenWallet": {
          "type": "string",
          "required": [
            "quoteTokenWallet"
          ]
        },
        "openOrdersAddress": {
          "type": "string",
          "description": "If left empty the Serum API will lookup the account which can be time consuming"
        },
        "computeLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Optional: specifies total compute limit to be allocated for all instructions within the created tx"
        },
        "computePrice": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: specifies compute price in microlamports to be included as a part of instruction, known as priority fee"
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        }
      },
      "required": [
        "ownerAddress",
        "market",
        "baseTokenWallet",
        "quoteTokenWallet"
      ]
    },
    "apiPostSettleRequestV2": {
      "type": "object",
      "properties": {
        "ownerAddress": {
          "type": "string",
          "required": [
            "ownerAddress"
          ]
        },
        "market": {
          "type": "string",
          "required": [
            "market"
          ]
        },
        "baseTokenWallet": {
          "type": "string",
          "required": [
            "baseTokenWallet"
          ]
        },
        "quoteTokenWallet": {
          "type": "string",
          "required": [
            "quoteTokenWallet"
          ]
        },
        "openOrdersAddress": {
          "type": "string",
          "description": "If left empty the Serum API will lookup the account which can be time consuming"
        },
        "computeLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Optional: specifies total compute limit to be allocated for all instructions within the created tx"
        },
        "computePrice": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: specifies compute price in microlamports to be included as a part of instruction, known as priority fee"
        },
        "tip": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: Specifies a tip amount that will be used to pay for front-running protection and/or bundle submission services. Minimum value is 1025"
        }
      },
      "required": [
        "ownerAddress",
        "market",
        "baseTokenWallet",
        "quoteTokenWallet"
      ]
    },
    "apiPostSettleResponse": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/apiTransactionMessage"
        }
      }
    },
    "apiPostSubmitBatchRequest": {
      "type": "object",
      "properties": {
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiPostSubmitRequestEntry"
          }
        },
        "submitStrategy": {
          "$ref": "#/definitions/apiSubmitStrategy"
        },
        "useBundle": {
          "type": "boolean"
        },
        "frontRunningProtection": {
          "type": "boolean"
        }
      }
    },
    "apiPostSubmitBatchResponse": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiPostSubmitBatchResponseEntry"
          }
        }
      }
    },
    "apiPostSubmitBatchResponseEntry": {
      "type": "object",
      "properties": {
        "signature": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "submitted": {
          "type": "boolean"
        }
      }
    },
    "apiPostSubmitRequest": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/apiTransactionMessage"
        },
        "skipPreFlight": {
          "type": "boolean"
        },
        "frontRunningProtection": {
          "type": "boolean"
        },
        "tip": {
          "type": "string",
          "format": "uint64"
        },
        "useStakedRPCs": {
          "type": "boolean"
        },
        "fastBestEffort": {
          "type": "boolean"
        }
      }
    },
    "apiPostSubmitRequestEntry": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/apiTransactionMessage"
        },
        "skipPreFlight": {
          "type": "boolean"
        }
      }
    },
    "apiPostSubmitResponse": {
      "type": "object",
      "properties": {
        "signature": {
          "type": "string"
        }
      }
    },
    "apiPostZetaCrossMarginAccountRequest": {
      "type": "object",
      "properties": {
        "ownerAddress": {
          "type": "string"
        },
        "computeLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Optional: specifies total compute limit to be allocated for all instructions within the created tx"
        },
        "computePrice": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: specifies compute price in microlamports to be included as a part of instruction, known as priority fee"
        },
        "tip": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: Specifies a tip amount that will be used to pay for front-running protection and/or bundle submission services. Minimum value is 1025"
        }
      }
    },
    "apiPostZetaCrossMarginAccountResponse": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/apiTransactionMessage"
        }
      }
    },
    "apiProject": {
      "type": "string",
      "enum": [
        "P_UNKNOWN",
        "P_ALL",
        "P_JUPITER",
        "P_RAYDIUM",
        "P_SERUM",
        "P_OPENBOOK"
      ],
      "default": "P_UNKNOWN"
    },
    "apiProjectPool": {
      "type": "object",
      "properties": {
        "pool": {
          "type": "string"
        },
        "poolAddress": {
          "type": "string"
        },
        "token1Reserves": {
          "type": "string",
          "format": "int64"
        },
        "token1MintAddress": {
          "type": "string"
        },
        "token1MintSymbol": {
          "type": "string"
        },
        "token2Reserves": {
          "type": "string",
          "format": "int64"
        },
        "token2MintAddress": {
          "type": "string"
        },
        "token2MintSymbol": {
          "type": "string"
        },
        "openTime": {
          "type": "string",
          "format": "uint64"
        },
        "poolType": {
          "type": "string"
        },
        "liquidityPoolKeys": {
          "$ref": "#/definitions/apiLiquidityPoolKeys"
        }
      }
    },
    "apiProjectPools": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/apiProject"
        },
        "pools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiProjectPool"
          }
        }
      }
    },
    "apiProjectQuote": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/apiProject"
        },
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiQuoteRoute"
          }
        }
      }
    },
    "apiPublicKeys": {
      "type": "object",
      "properties": {
        "pks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "apiQuoteRoute": {
      "type": "object",
      "properties": {
        "inAmount": {
          "type": "number",
          "format": "double"
        },
        "outAmount": {
          "type": "number",
          "format": "double"
        },
        "outAmountMin": {
          "type": "number",
          "format": "double"
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiQuoteStep"
          }
        }
      }
    },
    "apiQuoteStep": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/apiStepProject"
        },
        "inToken": {
          "type": "string"
        },
        "inTokenAddress": {
          "type": "string"
        },
        "outToken": {
          "type": "string"
        },
        "outTokenAddress": {
          "type": "string"
        },
        "inAmount": {
          "type": "number",
          "format": "double"
        },
        "outAmount": {
          "type": "number",
          "format": "double"
        },
        "slippage": {
          "type": "number",
          "format": "double"
        },
        "priceImpactPercent": {
          "$ref": "#/definitions/commonPriceImpactPercent"
        },
        "fee": {
          "$ref": "#/definitions/commonFee"
        },
        "outAmountMin": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiRaydiumQuoteRoute": {
      "type": "object",
      "properties": {
        "inAmount": {
          "type": "number",
          "format": "double"
        },
        "outAmount": {
          "type": "number",
          "format": "double"
        },
        "outAmountMin": {
          "type": "number",
          "format": "double"
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiRaydiumQuoteStep"
          }
        }
      }
    },
    "apiRaydiumQuoteStep": {
      "type": "object",
      "properties": {
        "inToken": {
          "type": "string"
        },
        "inTokenAddress": {
          "type": "string"
        },
        "outToken": {
          "type": "string"
        },
        "outTokenAddress": {
          "type": "string"
        },
        "inAmount": {
          "type": "number",
          "format": "double"
        },
        "outAmount": {
          "type": "number",
          "format": "double"
        },
        "slippage": {
          "type": "number",
          "format": "double"
        },
        "priceImpactPercent": {
          "$ref": "#/definitions/commonPriceImpactPercentV2"
        },
        "fee": {
          "$ref": "#/definitions/commonFee"
        },
        "outAmountMin": {
          "type": "number",
          "format": "double"
        },
        "project": {
          "$ref": "#/definitions/apiStepProject"
        }
      }
    },
    "apiRaydiumRouteStep": {
      "type": "object",
      "properties": {
        "inToken": {
          "type": "string"
        },
        "inAmount": {
          "type": "number",
          "format": "double"
        },
        "outToken": {
          "type": "string"
        },
        "outAmount": {
          "type": "number",
          "format": "double"
        },
        "outAmountMin": {
          "type": "number",
          "format": "double"
        },
        "poolAddress": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/apiStepProject"
        }
      }
    },
    "apiRouteStep": {
      "type": "object",
      "properties": {
        "inToken": {
          "type": "string"
        },
        "inAmount": {
          "type": "number",
          "format": "double"
        },
        "outToken": {
          "type": "string"
        },
        "outAmount": {
          "type": "number",
          "format": "double"
        },
        "outAmountMin": {
          "type": "number",
          "format": "double"
        },
        "project": {
          "$ref": "#/definitions/apiStepProject"
        },
        "fee": {
          "$ref": "#/definitions/commonFee"
        }
      }
    },
    "apiRouteTradeSwapRequest": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/apiProject"
        },
        "ownerAddress": {
          "type": "string"
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiRouteStep"
          }
        },
        "slippage": {
          "type": "number",
          "format": "double"
        },
        "computeLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Optional: specifies total compute limit to be allocated for all instructions within the created tx"
        },
        "computePrice": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: specifies compute price in microlamports to be included as a part of instruction, known as priority fee"
        },
        "tip": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: Specifies a tip amount that will be used to pay for front-running protection and/or bundle submission services. Minimum value is 1025"
        }
      }
    },
    "apiSide": {
      "type": "string",
      "enum": [
        "S_UNKNOWN",
        "S_BID",
        "S_ASK"
      ],
      "default": "S_UNKNOWN"
    },
    "apiStepProject": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "apiStreamInfo": {
      "type": "object",
      "properties": {
        "streamName": {
          "type": "string"
        },
        "subscriptionID": {
          "type": "string"
        },
        "startTime": {
          "type": "string",
          "format": "int64"
        },
        "creditUsed": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "apiSubmitStrategy": {
      "type": "string",
      "enum": [
        "P_UKNOWN",
        "P_SUBMIT_ALL",
        "P_ABORT_ON_FIRST_ERROR",
        "P_WAIT_FOR_CONFIRMATION"
      ],
      "default": "P_UKNOWN"
    },
    "apiTicker": {
      "type": "object",
      "properties": {
        "market": {
          "type": "string"
        },
        "marketAddress": {
          "type": "string"
        },
        "bid": {
          "type": "number",
          "format": "double"
        },
        "bidSize": {
          "type": "number",
          "format": "double"
        },
        "ask": {
          "type": "number",
          "format": "double"
        },
        "askSize": {
          "type": "number",
          "format": "double"
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        }
      }
    },
    "apiTickerV2": {
      "type": "object",
      "properties": {
        "market": {
          "type": "string"
        },
        "marketAddress": {
          "type": "string"
        },
        "bid": {
          "type": "number",
          "format": "double"
        },
        "bidSize": {
          "type": "number",
          "format": "double"
        },
        "ask": {
          "type": "number",
          "format": "double"
        },
        "askSize": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiTokenAccount": {
      "type": "object",
      "properties": {
        "symbol": {
          "type": "string"
        },
        "tokenMint": {
          "type": "string"
        },
        "tokenAccount": {
          "type": "string"
        },
        "amount": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiTokenBalance": {
      "type": "object",
      "properties": {
        "symbol": {
          "type": "string"
        },
        "tokenMint": {
          "type": "string"
        },
        "settledAmount": {
          "type": "number",
          "format": "double"
        },
        "unsettledAmount": {
          "type": "number",
          "format": "double"
        },
        "openOrdersAmount": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiTokenPair": {
      "type": "object",
      "properties": {
        "inToken": {
          "type": "string"
        },
        "outToken": {
          "type": "string"
        },
        "inAmount": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiTokenPrice": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "tokenAddress": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        },
        "buy": {
          "type": "number",
          "format": "double"
        },
        "buySize": {
          "type": "number",
          "format": "double"
        },
        "sell": {
          "type": "number",
          "format": "double"
        },
        "sellSize": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiTokenPriceV2": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "tokenAddress": {
          "type": "string"
        },
        "buy": {
          "type": "number",
          "format": "double"
        },
        "buySize": {
          "type": "number",
          "format": "double"
        },
        "sell": {
          "type": "number",
          "format": "double"
        },
        "sellSize": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiTrade": {
      "type": "object",
      "properties": {
        "side": {
          "$ref": "#/definitions/apiSide"
        },
        "size": {
          "type": "number",
          "format": "double"
        },
        "fillPrice": {
          "type": "number",
          "format": "double"
        },
        "orderID": {
          "type": "string"
        },
        "isMaker": {
          "type": "boolean"
        },
        "address": {
          "type": "string"
        },
        "feeOrRebate": {
          "type": "number",
          "format": "double"
        },
        "orderPrice": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiTradeSwapRequest": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/apiProject"
        },
        "ownerAddress": {
          "type": "string"
        },
        "inToken": {
          "type": "string"
        },
        "outToken": {
          "type": "string"
        },
        "inAmount": {
          "type": "number",
          "format": "double"
        },
        "slippage": {
          "type": "number",
          "format": "double"
        },
        "computeLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Optional: specifies total compute limit to be allocated for all instructions within the created tx"
        },
        "computePrice": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: specifies compute price in microlamports to be included as a part of instruction, known as priority fee"
        },
        "tip": {
          "type": "string",
          "format": "uint64",
          "description": "Optional: Specifies a tip amount that will be used to pay for front-running protection and/or bundle submission services. Minimum value is 1025"
        }
      }
    },
    "apiTradeSwapResponse": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/apiProject"
        },
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTransactionMessage"
          }
        },
        "outAmount": {
          "type": "number",
          "format": "double"
        },
        "outAmountMin": {
          "type": "number",
          "format": "double"
        },
        "priceImpact": {
          "$ref": "#/definitions/commonPriceImpactPercent"
        },
        "fees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonFee"
          }
        }
      }
    },
    "apiTransactionMessage": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string"
        },
        "isCleanup": {
          "type": "boolean"
        }
      }
    },
    "apiTransactionMessageHeader": {
      "type": "object",
      "properties": {
        "numRequiredSignatures": {
          "type": "integer",
          "format": "int64"
        },
        "numReadonlySignedAccounts": {
          "type": "integer",
          "format": "int64"
        },
        "numReadonlyUnsignedAccounts": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiTransactionMessageZeta": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/apiTransactionMessageHeader"
        },
        "accountKeys": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "recentBlockhash": {
          "type": "string"
        },
        "instructions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiInstruction"
          }
        }
      }
    },
    "apiTransactionMeta": {
      "type": "object",
      "properties": {
        "err": {
          "type": "string"
        },
        "errored": {
          "type": "boolean"
        },
        "fee": {
          "type": "string",
          "format": "uint64"
        },
        "preBalances": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uint64"
          }
        },
        "postBalances": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uint64"
          }
        },
        "innerInstructions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTransactionMetaInnerInstruction"
          }
        },
        "logMessages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "preTokenBalances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTransactionMetaTokenBalance"
          }
        },
        "postTokenBalances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTransactionMetaTokenBalance"
          }
        }
      }
    },
    "apiTransactionMetaInnerInstruction": {
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int64"
        },
        "instructions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiInstruction"
          }
        }
      }
    },
    "apiTransactionMetaTokenBalance": {
      "type": "object",
      "properties": {
        "accountIndex": {
          "type": "integer",
          "format": "int64"
        },
        "mint": {
          "type": "string"
        },
        "uiTokenAmount": {
          "$ref": "#/definitions/apiUITokenAmount"
        },
        "owner": {
          "type": "string"
        }
      }
    },
    "apiTransactionZeta": {
      "type": "object",
      "properties": {
        "signatures": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "message": {
          "$ref": "#/definitions/apiTransactionMessageZeta"
        }
      }
    },
    "apiUITokenAmount": {
      "type": "object",
      "properties": {
        "uiAmount": {
          "type": "number",
          "format": "double"
        },
        "decimals": {
          "type": "integer",
          "format": "int64"
        },
        "amount": {
          "type": "string"
        },
        "uiAmountString": {
          "type": "string"
        }
      }
    },
    "apiUnsettledAccount": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string"
        },
        "baseToken": {
          "$ref": "#/definitions/apiUnsettledAccountToken"
        },
        "quoteToken": {
          "$ref": "#/definitions/apiUnsettledAccountToken"
        }
      }
    },
    "apiUnsettledAccountToken": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "amount": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "commonFee": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "format": "float"
        },
        "mint": {
          "type": "string"
        },
        "percent": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "commonInfinity": {
      "type": "string",
      "enum": [
        "INF_NOT",
        "INF_POSITIVE",
        "INF_NEGATIVE"
      ],
      "default": "INF_NOT"
    },
    "commonOrderType": {
      "type": "string",
      "enum": [
        "OT_MARKET",
        "OT_LIMIT",
        "OT_IOC",
        "OT_POST"
      ],
      "default": "OT_MARKET"
    },
    "commonPriceImpactPercent": {
      "type": "object",
      "properties": {
        "percent": {
          "type": "number",
          "format": "double"
        },
        "infinity": {
          "$ref": "#/definitions/commonInfinity"
        }
      }
    },
    "commonPriceImpactPercentV2": {
      "type": "object",
      "properties": {
        "percent": {
          "type": "number",
          "format": "double"
        },
        "infinity": {
          "type": "string"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "Auth Header": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "Auth Header": []
    }
  ]
}
