{
  "swagger": "2.0",
  "info": {
    "title": "Trader API",
    "description": "Easy-to-use API for interacting with trader services on the Solana blockchain, powered by bloXroute Labs.",
    "version": "1.6",
    "contact": {
      "name": "bloXroute Labs Trader API Documentation",
      "url": "https://docs.bloxroute.com/solana/trader-api",
      "email": "support@bloxroute.com"
    }
  },
  "tags": [
    {
      "name": "Api",
      "externalDocs": {
        "description": "Detailed API documentation",
        "url": "https://bloxroute.gitbook.io/serum-api/about/welcome"
      }
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/account/balance": {
      "get": {
        "summary": "Token balances",
        "description": "Returns the all token balances for a wallet",
        "operationId": "Api_GetAccountBalance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetAccountBalanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ownerAddress",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Account"
        ]
      }
    },
    "/api/v1/account/token-accounts": {
      "get": {
        "summary": "Token accounts with balances",
        "description": "Returns the all token accounts with their balances for a wallet",
        "operationId": "Api_GetTokenAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetTokenAccountsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ownerAddress",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Account"
        ]
      }
    },
    "/api/v1/market/depth/{market}": {
      "get": {
        "summary": "Market depth",
        "description": "Returns market's aggregated price data. Use limit param to reduce the number of price points returned",
        "operationId": "Api_GetMarketDepth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetMarketDepthResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "market",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Use 0 for no limits",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "P_UNKNOWN",
              "P_ALL",
              "P_JUPITER",
              "P_RAYDIUM",
              "P_SERUM",
              "P_OPENBOOK",
              "P_DRIFT"
            ],
            "default": "P_UNKNOWN"
          }
        ],
        "tags": [
          "Market"
        ]
      }
    },
    "/api/v1/market/markets": {
      "get": {
        "summary": "Orderbook markets",
        "description": "Returns the list of orderbook markets",
        "operationId": "Api_GetMarkets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetMarketsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Market",
          "Orderbook"
        ]
      }
    },
    "/api/v1/market/orderbooks/{market}": {
      "get": {
        "summary": "Market orderbook",
        "description": "Returns market's orderbook. Use limit param to reduce the number of bids/asks returned",
        "operationId": "Api_GetOrderbook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetOrderbookResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "market",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Use 0 for no limits",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "P_UNKNOWN",
              "P_ALL",
              "P_JUPITER",
              "P_RAYDIUM",
              "P_SERUM",
              "P_OPENBOOK",
              "P_DRIFT"
            ],
            "default": "P_UNKNOWN"
          }
        ],
        "tags": [
          "Market",
          "Orderbook"
        ]
      }
    },
    "/api/v1/market/perp/contracts": {
      "get": {
        "summary": "details of available perp contracts",
        "description": "Returns details of available perp contracts",
        "operationId": "Api_GetPerpContracts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetPerpContractsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "P_UNKNOWN",
              "P_ALL",
              "P_JUPITER",
              "P_RAYDIUM",
              "P_SERUM",
              "P_OPENBOOK",
              "P_DRIFT"
            ],
            "default": "P_UNKNOWN"
          }
        ],
        "tags": [
          "Perp",
          "Market"
        ]
      }
    },
    "/api/v1/market/perp/orderbook/{contract}": {
      "get": {
        "summary": "Perpetuals contract orderbook",
        "description": "Returns perp contract's orderbook. Use limit param to reduce the number of bids/asks returned",
        "operationId": "Api_GetPerpOrderbook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetPerpOrderbookResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contract",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "ALL",
              "SOL_PERP",
              "ETH_PERP",
              "BTC_PERP",
              "APT_PERP",
              "BONK_PERP",
              "MATIC_PERP",
              "ARB_PERP",
              "DOGE_PERP",
              "BNB_PERP",
              "SUI_PERP",
              "PEPE_PERP"
            ]
          },
          {
            "name": "limit",
            "description": "Use 0 for no limits",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "P_UNKNOWN",
              "P_ALL",
              "P_JUPITER",
              "P_RAYDIUM",
              "P_SERUM",
              "P_OPENBOOK",
              "P_DRIFT"
            ],
            "default": "P_UNKNOWN"
          }
        ],
        "tags": [
          "Perp",
          "Orderbook",
          "Market"
        ]
      }
    },
    "/api/v1/market/pools": {
      "get": {
        "summary": "AMM Pools",
        "description": "Returns the list of supported AMM pools",
        "operationId": "Api_GetPools",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetPoolsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projects",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "P_UNKNOWN",
                "P_ALL",
                "P_JUPITER",
                "P_RAYDIUM",
                "P_SERUM",
                "P_OPENBOOK",
                "P_DRIFT"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pairOrAddress",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Market",
          "AMM"
        ]
      }
    },
    "/api/v1/market/price": {
      "get": {
        "summary": "Token prices",
        "description": "Returns the list of prices for specified tokens",
        "operationId": "Api_GetPrice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetPriceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tokens",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Market",
          "Universal"
        ]
      }
    },
    "/api/v1/market/quote": {
      "get": {
        "summary": "AMM Quotes",
        "description": "Returns quotes from supported AMMs",
        "operationId": "Api_GetQuotes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetQuotesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "inToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "outToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "inAmount",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "slippage",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "projects",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "P_UNKNOWN",
                "P_ALL",
                "P_JUPITER",
                "P_RAYDIUM",
                "P_SERUM",
                "P_OPENBOOK",
                "P_DRIFT"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Market",
          "AMM"
        ]
      }
    },
    "/api/v1/market/tickers/{market}": {
      "get": {
        "summary": "Orderbook tickers",
        "description": "Returns updated ticker(s). To receive all tickers use empty string for {market} param value",
        "operationId": "Api_GetTickers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetTickersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "market",
            "description": "Use empty string for all markets",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "P_UNKNOWN",
              "P_ALL",
              "P_JUPITER",
              "P_RAYDIUM",
              "P_SERUM",
              "P_OPENBOOK",
              "P_DRIFT"
            ],
            "default": "P_UNKNOWN"
          }
        ],
        "tags": [
          "Market",
          "Orderbook"
        ]
      }
    },
    "/api/v1/system/blockhash": {
      "get": {
        "summary": "Recent block hash",
        "description": "Returns recent block hash",
        "operationId": "Api_GetRecentBlockHash",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetRecentBlockHashResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/api/v1/system/time": {
      "get": {
        "summary": "Server time",
        "description": "Returns current time on the server",
        "operationId": "Api_GetServerTime",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetServerTimeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/api/v1/trade/cancel": {
      "post": {
        "summary": "Unsigned CancelOrder transaction",
        "description": "Generates a CancelOrder unsigned transaction object",
        "operationId": "Api_PostCancelOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostCancelOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostCancelOrderRequest"
            }
          }
        ],
        "tags": [
          "Trade",
          "Orderbook"
        ]
      }
    },
    "/api/v1/trade/cancelall": {
      "post": {
        "summary": "Unsigned CancelAll transaction",
        "description": "Generates a CancelAll unsigned transaction object",
        "operationId": "Api_PostCancelAll",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostCancelAllResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostCancelAllRequest"
            }
          }
        ],
        "tags": [
          "Trade",
          "Orderbook"
        ]
      }
    },
    "/api/v1/trade/cancelbyid": {
      "post": {
        "summary": "Unsigned CancelOrderByID transaction",
        "description": "Generates a CancelOrderByID unsigned transaction object",
        "operationId": "Api_PostCancelByClientOrderID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostCancelOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostCancelByClientOrderIDRequest"
            }
          }
        ],
        "tags": [
          "Trade",
          "Orderbook"
        ]
      }
    },
    "/api/v1/trade/openorders/{market}": {
      "get": {
        "summary": "List of user's open orders",
        "description": "Returns the list of open orders per user per market",
        "operationId": "Api_GetOpenOrders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetOpenOrdersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "market",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Use 0 for no limits",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "address",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "openOrdersAddress",
            "description": "If left empty the Serum API will lookup the account which can be time consuming, Setting both address and openOrdersAddress is invalid, openOrdersAddress is preferred.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "P_UNKNOWN",
              "P_ALL",
              "P_JUPITER",
              "P_RAYDIUM",
              "P_SERUM",
              "P_OPENBOOK",
              "P_DRIFT"
            ],
            "default": "P_UNKNOWN"
          }
        ],
        "tags": [
          "Trade",
          "Orderbook"
        ]
      }
    },
    "/api/v1/trade/orders/{market}": {
      "get": {
        "summary": "List of user's orders",
        "description": "Returns all user's orders",
        "operationId": "Api_GetOrders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetOrdersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "market",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "OS_UNKNOWN",
              "OS_OPEN",
              "OS_PARTIAL_FILL",
              "OS_CANCELLED",
              "OS_FILLED"
            ],
            "default": "OS_UNKNOWN"
          },
          {
            "name": "side",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "S_UNKNOWN",
              "S_BID",
              "S_ASK"
            ],
            "default": "S_UNKNOWN"
          },
          {
            "name": "types",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "OT_MARKET",
                "OT_LIMIT",
                "OT_IOC",
                "OT_POST"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "D_ASCENDING",
              "D_DESCENDING"
            ],
            "default": "D_ASCENDING"
          },
          {
            "name": "address",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "openOrdersAddress",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "P_UNKNOWN",
              "P_ALL",
              "P_JUPITER",
              "P_RAYDIUM",
              "P_SERUM",
              "P_OPENBOOK",
              "P_DRIFT"
            ],
            "default": "P_UNKNOWN"
          }
        ],
        "tags": [
          "Trade",
          "Orderbook"
        ]
      }
    },
    "/api/v1/trade/perp/assets": {
      "get": {
        "summary": "details of assets a user has",
        "description": "Returns details of assets a user has",
        "operationId": "Api_GetAssets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetAssetsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ownerAddress",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountAddress",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "P_UNKNOWN",
              "P_ALL",
              "P_JUPITER",
              "P_RAYDIUM",
              "P_SERUM",
              "P_OPENBOOK",
              "P_DRIFT"
            ],
            "default": "P_UNKNOWN"
          }
        ],
        "tags": [
          "Perp",
          "Trade"
        ]
      }
    },
    "/api/v1/trade/perp/cancel": {
      "post": {
        "summary": "cancel perp orders on a supported platform",
        "description": "Returns a partially signed txn signature to cancel perp orders on a supported platform",
        "operationId": "Api_PostCancelPerpOrders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostCancelPerpOrdersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostCancelPerpOrdersRequest"
            }
          }
        ],
        "tags": [
          "Trade",
          "Perp",
          "Orderbook"
        ]
      }
    },
    "/api/v1/trade/perp/cancelbyid": {
      "post": {
        "summary": "cancel perp order by id on a supported platform",
        "description": "Returns a partially signed txn signature to cancel perp order either based on order id or client order id on a supported platform",
        "operationId": "Api_PostCancelPerpOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostCancelPerpOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostCancelPerpOrderRequest"
            }
          }
        ],
        "tags": [
          "Trade",
          "Perp",
          "Orderbook"
        ]
      }
    },
    "/api/v1/trade/perp/close": {
      "post": {
        "summary": "closes a perp position on a supported platform",
        "description": "Returns a partially signed txn signature to close a perp position on a supported platform",
        "operationId": "Api_PostClosePerpPositions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostClosePerpPositionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostClosePerpPositionsRequest"
            }
          }
        ],
        "tags": [
          "Trade",
          "Perp",
          "Orderbook"
        ]
      }
    },
    "/api/v1/trade/perp/liquidate": {
      "post": {
        "summary": "liquidate perp positions",
        "description": "Returns a partially signed txn signature to liquidate perp positions",
        "operationId": "Api_PostLiquidatePerp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostLiquidatePerpResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostLiquidatePerpRequest"
            }
          }
        ],
        "tags": [
          "Perp",
          "Trade"
        ]
      }
    },
    "/api/v1/trade/perp/managecollateral": {
      "post": {
        "summary": "posts collateral on a perp platform",
        "description": "Returns a partially signed txn signature to manage collateral",
        "operationId": "Api_PostManageCollateral",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostManageCollateralResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostManageCollateralRequest"
            }
          }
        ],
        "tags": [
          "Perp",
          "Trade"
        ]
      }
    },
    "/api/v1/trade/perp/open-order-by-id": {
      "get": {
        "summary": "PERP order",
        "description": "Returns the detail of an open perp order",
        "operationId": "Api_GetOpenPerpOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetOpenPerpOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ownerAddress",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountAddress",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "contract",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ALL",
              "SOL_PERP",
              "ETH_PERP",
              "BTC_PERP",
              "APT_PERP",
              "BONK_PERP",
              "MATIC_PERP",
              "ARB_PERP",
              "DOGE_PERP",
              "BNB_PERP",
              "SUI_PERP",
              "PEPE_PERP"
            ],
            "default": "ALL"
          },
          {
            "name": "orderID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "clientOrderID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "P_UNKNOWN",
              "P_ALL",
              "P_JUPITER",
              "P_RAYDIUM",
              "P_SERUM",
              "P_OPENBOOK",
              "P_DRIFT"
            ],
            "default": "P_UNKNOWN"
          }
        ],
        "tags": [
          "Trade",
          "Perp",
          "Orderbook"
        ]
      }
    },
    "/api/v1/trade/perp/open-orders": {
      "get": {
        "summary": "PERP order positions",
        "description": "Returns the list current open perp orders positions",
        "operationId": "Api_GetOpenPerpOrders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetOpenPerpOrdersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "P_UNKNOWN",
              "P_ALL",
              "P_JUPITER",
              "P_RAYDIUM",
              "P_SERUM",
              "P_OPENBOOK",
              "P_DRIFT"
            ],
            "default": "P_UNKNOWN"
          },
          {
            "name": "ownerAddress",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountAddress",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "contracts",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ALL",
                "SOL_PERP",
                "ETH_PERP",
                "BTC_PERP",
                "APT_PERP",
                "BONK_PERP",
                "MATIC_PERP",
                "ARB_PERP",
                "DOGE_PERP",
                "BNB_PERP",
                "SUI_PERP",
                "PEPE_PERP"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Trade",
          "Perp",
          "Orderbook"
        ]
      }
    },
    "/api/v1/trade/perp/order": {
      "post": {
        "summary": "perp order",
        "description": "post a perp order",
        "operationId": "Api_PostPerpOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostPerpOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostPerpOrderRequest"
            }
          }
        ],
        "tags": [
          "Trade",
          "Perp",
          "Orderbook"
        ]
      }
    },
    "/api/v1/trade/perp/positions": {
      "get": {
        "summary": "PERP positions",
        "description": "Returns the list current perp positions",
        "operationId": "Api_GetPerpPositions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetPerpPositionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "P_UNKNOWN",
              "P_ALL",
              "P_JUPITER",
              "P_RAYDIUM",
              "P_SERUM",
              "P_OPENBOOK",
              "P_DRIFT"
            ],
            "default": "P_UNKNOWN"
          },
          {
            "name": "ownerAddress",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountAddress",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "contracts",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ALL",
                "SOL_PERP",
                "ETH_PERP",
                "BTC_PERP",
                "APT_PERP",
                "BONK_PERP",
                "MATIC_PERP",
                "ARB_PERP",
                "DOGE_PERP",
                "BNB_PERP",
                "SUI_PERP",
                "PEPE_PERP"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Trade",
          "Perp",
          "Orderbook"
        ]
      }
    },
    "/api/v1/trade/perp/settle-pnl": {
      "post": {
        "summary": "settle pnl on a perp platform",
        "description": "Returns a partially signed txn signature to settle pnl",
        "operationId": "Api_PostSettlePNL",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostSettlePNLResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostSettlePNLRequest"
            }
          }
        ],
        "tags": [
          "Perp",
          "Trade"
        ]
      }
    },
    "/api/v1/trade/perp/settle-pnls": {
      "post": {
        "summary": "settle pnls on a perp platform",
        "description": "Returns a partially signed txn signature to settle pnls",
        "operationId": "Api_PostSettlePNLs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostSettlePNLsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostSettlePNLsRequest"
            }
          }
        ],
        "tags": [
          "Perp",
          "Trade"
        ]
      }
    },
    "/api/v1/trade/place": {
      "post": {
        "summary": "Unsigned NewOrderV3 transaction",
        "description": "Generates a NewOrderV3 unsigned transaction object",
        "operationId": "Api_PostOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostOrderRequest"
            }
          }
        ],
        "tags": [
          "Trade",
          "Orderbook"
        ]
      }
    },
    "/api/v1/trade/replace": {
      "post": {
        "summary": "Unsigned ReplaceOrder transaction",
        "description": "Generates a ReplaceOrder unsigned transaction object",
        "operationId": "Api_PostReplaceOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostReplaceOrderRequest"
            }
          }
        ],
        "tags": [
          "Trade",
          "Orderbook"
        ]
      }
    },
    "/api/v1/trade/replacebyclientid": {
      "post": {
        "summary": "Unsigned ReplaceByClientOrderID transaction",
        "description": "Generates a ReplaceByClientOrderID unsigned transaction object",
        "operationId": "Api_PostReplaceByClientOrderID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostOrderRequest"
            }
          }
        ],
        "tags": [
          "Trade",
          "Orderbook"
        ]
      }
    },
    "/api/v1/trade/route-swap": {
      "post": {
        "summary": "Unsigned AMM swap transaction along route",
        "description": "Generates an unsigned transaction object for the AMM swap on the specified route",
        "operationId": "Api_PostRouteTradeSwap",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiTradeSwapResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiRouteTradeSwapRequest"
            }
          }
        ],
        "tags": [
          "Trade",
          "AMM"
        ]
      }
    },
    "/api/v1/trade/settle": {
      "post": {
        "summary": "Unsigned SettleFunds transaction",
        "description": "Generates a SettleFunds unsigned transaction object",
        "operationId": "Api_PostSettle",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostSettleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostSettleRequest"
            }
          }
        ],
        "tags": [
          "Trade",
          "Orderbook"
        ]
      }
    },
    "/api/v1/trade/submit": {
      "post": {
        "summary": "Transaction submit",
        "description": "Submits a signed transaction",
        "operationId": "Api_PostSubmit",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostSubmitResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostSubmitRequest"
            }
          }
        ],
        "tags": [
          "Trade",
          "Universal"
        ]
      }
    },
    "/api/v1/trade/submit-batch": {
      "post": {
        "summary": "Transaction batch submit",
        "description": "Submits a batch of signed transactions",
        "operationId": "Api_PostSubmitBatch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostSubmitBatchResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostSubmitBatchRequest"
            }
          }
        ],
        "tags": [
          "Trade",
          "Universal"
        ]
      }
    },
    "/api/v1/trade/swap": {
      "post": {
        "summary": "Unsigned best available AMM swap transaction",
        "description": "Generates an unsigned transaction object for the best available AMM swap",
        "operationId": "Api_PostTradeSwap",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiTradeSwapResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiTradeSwapRequest"
            }
          }
        ],
        "tags": [
          "Trade",
          "AMM"
        ]
      }
    },
    "/api/v1/trade/unsettled/{market}": {
      "get": {
        "summary": "Unsettled amounts",
        "description": "Returns the unsettled amounts of user in a market",
        "operationId": "Api_GetUnsettled",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetUnsettledResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "market",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ownerAddress",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "P_UNKNOWN",
              "P_ALL",
              "P_JUPITER",
              "P_RAYDIUM",
              "P_SERUM",
              "P_OPENBOOK",
              "P_DRIFT"
            ],
            "default": "P_UNKNOWN"
          }
        ],
        "tags": [
          "Trade",
          "Orderbook"
        ]
      }
    },
    "/api/v1/trade/user": {
      "get": {
        "summary": "gets the user on a supported platform",
        "description": "Returns the user info for an account on a supported platform",
        "operationId": "Api_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ownerAddress",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountAddress",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "P_UNKNOWN",
              "P_ALL",
              "P_JUPITER",
              "P_RAYDIUM",
              "P_SERUM",
              "P_OPENBOOK",
              "P_DRIFT"
            ],
            "default": "P_UNKNOWN"
          }
        ],
        "tags": [
          "Trade"
        ]
      },
      "post": {
        "summary": "creates a user profile on a supported platform",
        "description": "Returns a partially signed txn signature to create a user on a supported platform",
        "operationId": "Api_PostCreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostCreateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostCreateUserRequest"
            }
          }
        ],
        "tags": [
          "Trade"
        ]
      }
    },
    "/api/v2/drift/enable-margin": {
      "post": {
        "summary": "margin order",
        "description": "Enables a margin trading on drift platform",
        "operationId": "Api_PostDriftEnableMarginTrading",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostDriftEnableMarginTradingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostDriftEnableMarginTradingRequest"
            }
          }
        ],
        "tags": [
          "v2",
          "Trade",
          "Margin"
        ]
      }
    },
    "/api/v2/drift/margin-cancel": {
      "post": {
        "summary": "cancel Drift margin orders",
        "description": "Returns a partially signed txn signature to cancel Drift margin orders",
        "operationId": "Api_PostCancelDriftMarginOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostCancelDriftMarginOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostCancelDriftMarginOrderRequest"
            }
          }
        ],
        "tags": [
          "v2",
          "Trade",
          "Market"
        ]
      }
    },
    "/api/v2/drift/margin-open-orders": {
      "get": {
        "summary": "PERP order",
        "description": "Returns the detail of all open margin orders",
        "operationId": "Api_GetDriftOpenMarginOrders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetDriftOpenMarginOrdersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ownerAddress",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountAddress",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "markets",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "v2",
          "Trade",
          "Margin"
        ]
      }
    },
    "/api/v2/drift/margin-orderbooks/{market}": {
      "get": {
        "summary": "Perpetuals contract orderbook",
        "description": "Returns perp contract's orderbook. Use limit param to reduce the number of bids/asks returned",
        "operationId": "Api_GetDriftMarginOrderbook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetDriftMarginOrderbookResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "market",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Use 0 for no limits",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "metadata",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "v2",
          "Orderbook",
          "Market"
        ]
      }
    },
    "/api/v2/drift/margin-place": {
      "post": {
        "summary": "margin order",
        "description": "Places a margin order on drift platform",
        "operationId": "Api_PostDriftMarginOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostDriftMarginOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostDriftMarginOrderRequest"
            }
          }
        ],
        "tags": [
          "v2",
          "Trade",
          "Margin"
        ]
      }
    },
    "/api/v2/drift/market-depth/{contract}": {
      "get": {
        "summary": "Perpetuals contract orderbook",
        "description": "Returns Drift contract's market depth data. Use limit param to reduce the number of bids/asks's data points returned",
        "operationId": "Api_GetDriftMarketDepth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetDriftMarketDepthResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contract",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Use 0 for no limits",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "v2",
          "Drift"
        ]
      }
    },
    "/api/v2/drift/markets": {
      "get": {
        "summary": "drift orderbook markets",
        "description": "Returns the list of orderbook markets",
        "operationId": "Api_GetDriftMarkets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetDriftMarketsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "metadata",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "v2",
          "Market",
          "Orderbook"
        ]
      }
    },
    "/api/v2/drift/modify-order": {
      "post": {
        "summary": "modify Drift order",
        "description": "post a modify order tx on Drift platform",
        "operationId": "Api_PostModifyDriftOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPostModifyDriftOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostModifyDriftOrderRequest"
            }
          }
        ],
        "tags": [
          "v2",
          "Trade",
          "Market"
        ]
      }
    }
  },
  "definitions": {
    "apiAsset": {
      "type": "object",
      "properties": {
        "valuationAsset": {
          "type": "string"
        },
        "balance": {
          "type": "number",
          "format": "double"
        },
        "valuation": {
          "type": "number",
          "format": "double"
        },
        "accountAddress": {
          "type": "string"
        },
        "subAccountID": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "apiBlock": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "uint64"
        },
        "hash": {
          "type": "string"
        },
        "time": {
          "type": "string",
          "format": "int64"
        },
        "height": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "apiCandle": {
      "type": "object",
      "properties": {
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "updateTime": {
          "type": "string",
          "format": "date-time"
        },
        "open": {
          "type": "number",
          "format": "double"
        },
        "close": {
          "type": "number",
          "format": "double"
        },
        "low": {
          "type": "number",
          "format": "double"
        },
        "high": {
          "type": "number",
          "format": "double"
        },
        "amount": {
          "type": "number",
          "format": "double"
        },
        "volume": {
          "type": "number",
          "format": "double"
        },
        "count": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiContractInfo": {
      "type": "object",
      "properties": {
        "contract": {
          "$ref": "#/definitions/commonPerpContract"
        },
        "contractAddress": {
          "type": "string"
        },
        "fundingRate": {
          "type": "number",
          "format": "double"
        },
        "minSize": {
          "type": "number",
          "format": "double"
        },
        "perpPrice": {
          "type": "number",
          "format": "double"
        },
        "indexPrice": {
          "type": "number",
          "format": "double"
        },
        "openInterest": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiDirection": {
      "type": "string",
      "enum": [
        "D_ASCENDING",
        "D_DESCENDING"
      ],
      "default": "D_ASCENDING"
    },
    "apiDriftMarginOrder": {
      "type": "object",
      "properties": {
        "orderID": {
          "type": "string",
          "format": "uint64"
        },
        "clientOrderID": {
          "type": "string",
          "format": "uint64"
        },
        "market": {
          "type": "string"
        },
        "positionSide": {
          "type": "string"
        },
        "orderType": {
          "type": "string"
        },
        "price": {
          "type": "number",
          "format": "double"
        },
        "size": {
          "type": "number",
          "format": "double"
        },
        "remainingSize": {
          "type": "number",
          "format": "double"
        },
        "status": {
          "type": "string"
        },
        "accountAddress": {
          "type": "string"
        },
        "subAccountID": {
          "type": "string",
          "format": "uint64"
        },
        "postOnly": {
          "type": "boolean"
        }
      }
    },
    "apiDriftMarginOrderbookItem": {
      "type": "object",
      "properties": {
        "price": {
          "type": "number",
          "format": "double"
        },
        "size": {
          "type": "number",
          "format": "double"
        },
        "orderID": {
          "type": "string",
          "description": "Drift generated OrderID"
        },
        "clientOrderID": {
          "type": "string",
          "format": "uint64"
        },
        "ownerAddress": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "apiDriftMarket": {
      "type": "object",
      "properties": {
        "market": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "baseMint": {
          "type": "string"
        },
        "quotedMint": {
          "type": "string"
        },
        "baseDecimals": {
          "type": "string",
          "format": "int64"
        },
        "quoteDecimals": {
          "type": "string",
          "format": "int64"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "apiDriftMarketDepthItem": {
      "type": "object",
      "properties": {
        "price": {
          "type": "number",
          "format": "double"
        },
        "size": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiGetAccountBalanceResponse": {
      "type": "object",
      "properties": {
        "tokens": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTokenBalance"
          }
        }
      }
    },
    "apiGetAssetsResponse": {
      "type": "object",
      "properties": {
        "ownerAddress": {
          "type": "string"
        },
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiAsset"
          }
        }
      }
    },
    "apiGetBlockStreamResponse": {
      "type": "object",
      "properties": {
        "block": {
          "$ref": "#/definitions/apiBlock"
        }
      }
    },
    "apiGetDriftMarginOrderbookResponse": {
      "type": "object",
      "properties": {
        "market": {
          "type": "string"
        },
        "marketAddress": {
          "type": "string"
        },
        "bids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiDriftMarginOrderbookItem"
          }
        },
        "asks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiDriftMarginOrderbookItem"
          }
        }
      }
    },
    "apiGetDriftMarginOrderbooksStreamResponse": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "int64"
        },
        "orderbook": {
          "$ref": "#/definitions/apiGetDriftMarginOrderbookResponse"
        }
      }
    },
    "apiGetDriftMarketDepthResponse": {
      "type": "object",
      "properties": {
        "contract": {
          "type": "string"
        },
        "bids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiDriftMarketDepthItem"
          }
        },
        "asks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiDriftMarketDepthItem"
          }
        }
      }
    },
    "apiGetDriftMarketDepthStreamResponse": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "int64"
        },
        "Data": {
          "$ref": "#/definitions/apiGetDriftMarketDepthResponse"
        }
      }
    },
    "apiGetDriftMarketsResponse": {
      "type": "object",
      "properties": {
        "markets": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/apiDriftMarket"
          }
        }
      }
    },
    "apiGetDriftOpenMarginOrdersResponse": {
      "type": "object",
      "properties": {
        "ownerAddress": {
          "type": "string"
        },
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiDriftMarginOrder"
          }
        }
      }
    },
    "apiGetKlineResponse": {
      "type": "object",
      "properties": {
        "market": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "candles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiCandle"
          }
        }
      }
    },
    "apiGetMarketDepthResponse": {
      "type": "object",
      "properties": {
        "market": {
          "type": "string"
        },
        "marketAddress": {
          "type": "string"
        },
        "bids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiMarketDepthItem"
          }
        },
        "asks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiMarketDepthItem"
          }
        }
      }
    },
    "apiGetMarketDepthsStreamResponse": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "int64"
        },
        "Data": {
          "$ref": "#/definitions/apiGetMarketDepthResponse"
        }
      }
    },
    "apiGetMarketsResponse": {
      "type": "object",
      "properties": {
        "markets": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/apiMarket"
          }
        }
      }
    },
    "apiGetNewPerpOrdersStreamResponse": {
      "type": "object",
      "properties": {
        "contract": {
          "$ref": "#/definitions/commonPerpContract"
        },
        "side": {
          "$ref": "#/definitions/commonPerpPositionSide"
        },
        "type": {
          "$ref": "#/definitions/commonPerpOrderType"
        },
        "userAddress": {
          "type": "string"
        },
        "orderID": {
          "type": "string"
        },
        "clientOrderID": {
          "type": "string"
        },
        "slot": {
          "type": "string"
        },
        "price": {
          "type": "number",
          "format": "double"
        },
        "triggerPrice": {
          "type": "number",
          "format": "double"
        },
        "baseAmount": {
          "type": "number",
          "format": "double"
        },
        "baseAmountFilled": {
          "type": "number",
          "format": "double"
        },
        "quoteAmount": {
          "type": "number",
          "format": "double"
        },
        "quoteAmountFilled": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiGetOpenOrdersResponse": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiOrder"
          }
        }
      }
    },
    "apiGetOpenPerpOrderResponse": {
      "type": "object",
      "properties": {
        "ownerAddress": {
          "type": "string"
        },
        "order": {
          "$ref": "#/definitions/apiPerpOrder"
        }
      }
    },
    "apiGetOpenPerpOrdersResponse": {
      "type": "object",
      "properties": {
        "ownerAddress": {
          "type": "string"
        },
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiPerpOrder"
          }
        }
      }
    },
    "apiGetOrderByIDResponse": {
      "type": "object",
      "properties": {
        "order": {
          "$ref": "#/definitions/apiOrder"
        }
      }
    },
    "apiGetOrderStatusResponse": {
      "type": "object",
      "properties": {
        "market": {
          "type": "string"
        },
        "openOrderAddress": {
          "type": "string"
        },
        "orderID": {
          "type": "string"
        },
        "clientOrderID": {
          "type": "string",
          "format": "uint64"
        },
        "quantityReleased": {
          "type": "number",
          "format": "float"
        },
        "quantityRemaining": {
          "type": "number",
          "format": "float"
        },
        "fillPrice": {
          "type": "number",
          "format": "float"
        },
        "side": {
          "$ref": "#/definitions/apiSide"
        },
        "orderStatus": {
          "$ref": "#/definitions/apiOrderStatus"
        },
        "orderPrice": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "apiGetOrderStatusStreamResponse": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "int64"
        },
        "orderInfo": {
          "$ref": "#/definitions/apiGetOrderStatusResponse"
        }
      }
    },
    "apiGetOrderbookResponse": {
      "type": "object",
      "properties": {
        "market": {
          "type": "string"
        },
        "marketAddress": {
          "type": "string"
        },
        "bids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiOrderbookItem"
          }
        },
        "asks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiOrderbookItem"
          }
        }
      }
    },
    "apiGetOrderbooksStreamResponse": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "int64"
        },
        "orderbook": {
          "$ref": "#/definitions/apiGetOrderbookResponse"
        }
      }
    },
    "apiGetOrdersResponse": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiHistoricalOrder"
          }
        }
      }
    },
    "apiGetPerpContractsResponse": {
      "type": "object",
      "properties": {
        "contracts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiContractInfo"
          }
        }
      }
    },
    "apiGetPerpOrderbookResponse": {
      "type": "object",
      "properties": {
        "contract": {
          "$ref": "#/definitions/commonPerpContract"
        },
        "bids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiPerpOrderbookItem"
          }
        },
        "asks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiPerpOrderbookItem"
          }
        }
      }
    },
    "apiGetPerpOrderbooksStreamResponse": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "int64"
        },
        "orderbook": {
          "$ref": "#/definitions/apiGetPerpOrderbookResponse"
        }
      }
    },
    "apiGetPerpPositionsResponse": {
      "type": "object",
      "properties": {
        "ownerAddress": {
          "type": "string"
        },
        "perpPositions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiPerpPosition"
          }
        }
      }
    },
    "apiGetPerpTradesResponse": {
      "type": "object",
      "properties": {
        "contract": {
          "$ref": "#/definitions/commonPerpContract"
        },
        "indexPrice": {
          "type": "number",
          "format": "double"
        },
        "marketIndex": {
          "type": "string",
          "format": "int64"
        },
        "filler": {
          "type": "string"
        },
        "fillerReward": {
          "type": "number",
          "format": "double"
        },
        "fillRecordID": {
          "type": "string",
          "format": "int64"
        },
        "baseAssetAmountFilled": {
          "type": "number",
          "format": "double"
        },
        "quoteAssetAmountFilled": {
          "type": "number",
          "format": "double"
        },
        "takerFee": {
          "type": "number",
          "format": "double"
        },
        "makerFee": {
          "type": "number",
          "format": "double"
        },
        "referrerReward": {
          "type": "number",
          "format": "double"
        },
        "quoteAssetAmountSurplus": {
          "type": "number",
          "format": "double"
        },
        "spotFulfillmentMethodFee": {
          "type": "number",
          "format": "double"
        },
        "taker": {
          "type": "string"
        },
        "takerOrderID": {
          "type": "string",
          "format": "int64"
        },
        "takerOrderDirection": {
          "type": "string"
        },
        "takerOrderBaseAssetAmount": {
          "type": "number",
          "format": "double"
        },
        "takerOrderCumulativeBaseAssetAmountFilled": {
          "type": "number",
          "format": "double"
        },
        "takerOrderCumulativeQuoteAssetAmountFilled": {
          "type": "number",
          "format": "double"
        },
        "maker": {
          "type": "string"
        },
        "makerOrderID": {
          "type": "string",
          "format": "int64"
        },
        "makerOrderDirection": {
          "type": "string"
        },
        "makerOrderBaseAssetAmount": {
          "type": "number",
          "format": "double"
        },
        "makerOrderCumulativeBaseAssetAmountFilled": {
          "type": "number",
          "format": "double"
        },
        "makerOrderCumulativeQuoteAssetAmountFilled": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiGetPerpTradesStreamResponse": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "int64"
        },
        "trade": {
          "$ref": "#/definitions/apiGetPerpTradesResponse"
        }
      }
    },
    "apiGetPoolReservesStreamResponse": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "int64"
        },
        "reserves": {
          "$ref": "#/definitions/apiPoolReserves"
        }
      }
    },
    "apiGetPoolsResponse": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiProjectPools"
          }
        }
      }
    },
    "apiGetPriceResponse": {
      "type": "object",
      "properties": {
        "tokenPrices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTokenPrice"
          }
        }
      }
    },
    "apiGetPricesStreamResponse": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "int64"
        },
        "price": {
          "$ref": "#/definitions/apiTokenPrice"
        }
      }
    },
    "apiGetQuotesResponse": {
      "type": "object",
      "properties": {
        "inToken": {
          "type": "string"
        },
        "inTokenAddress": {
          "type": "string"
        },
        "outToken": {
          "type": "string"
        },
        "outTokenAddress": {
          "type": "string"
        },
        "inAmount": {
          "type": "number",
          "format": "double"
        },
        "quotes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiProjectQuote"
          }
        }
      }
    },
    "apiGetQuotesStreamResponse": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "int64"
        },
        "quote": {
          "$ref": "#/definitions/apiGetQuotesStreamUpdate"
        }
      }
    },
    "apiGetQuotesStreamUpdate": {
      "type": "object",
      "properties": {
        "inToken": {
          "type": "string"
        },
        "inTokenAddress": {
          "type": "string"
        },
        "outToken": {
          "type": "string"
        },
        "outTokenAddress": {
          "type": "string"
        },
        "inAmount": {
          "type": "number",
          "format": "double"
        },
        "outAmount": {
          "type": "number",
          "format": "double"
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        }
      }
    },
    "apiGetRecentBlockHashResponse": {
      "type": "object",
      "properties": {
        "blockHash": {
          "type": "string"
        }
      }
    },
    "apiGetServerTimeResponse": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string"
        }
      }
    },
    "apiGetSwapsStreamResponse": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "int64"
        },
        "swap": {
          "$ref": "#/definitions/apiGetSwapsStreamUpdate"
        }
      }
    },
    "apiGetSwapsStreamUpdate": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        },
        "poolAddress": {
          "type": "string"
        },
        "inToken": {
          "type": "string"
        },
        "inTokenAddress": {
          "type": "string"
        },
        "outToken": {
          "type": "string"
        },
        "outTokenAddress": {
          "type": "string"
        },
        "inAmount": {
          "type": "number",
          "format": "double"
        },
        "outAmountMin": {
          "type": "number",
          "format": "double"
        },
        "sourceAccount": {
          "type": "string"
        },
        "destinationAccount": {
          "type": "string"
        },
        "ownerAccount": {
          "type": "string"
        },
        "signature": {
          "type": "string"
        }
      }
    },
    "apiGetTickersResponse": {
      "type": "object",
      "properties": {
        "tickers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTicker"
          }
        }
      }
    },
    "apiGetTickersStreamResponse": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "int64"
        },
        "ticker": {
          "$ref": "#/definitions/apiGetTickersResponse"
        }
      }
    },
    "apiGetTokenAccountsResponse": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTokenAccount"
          }
        }
      }
    },
    "apiGetTradesResponse": {
      "type": "object",
      "properties": {
        "trades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTrade"
          }
        }
      }
    },
    "apiGetTradesStreamResponse": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "int64"
        },
        "trades": {
          "$ref": "#/definitions/apiGetTradesResponse"
        }
      }
    },
    "apiGetUnsettledResponse": {
      "type": "object",
      "properties": {
        "market": {
          "type": "string"
        },
        "unsettled": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiUnsettledAccount"
          }
        }
      }
    },
    "apiGetUserResponse": {
      "type": "object",
      "properties": {
        "userAccounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiUserDetail"
          }
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        }
      }
    },
    "apiHistoricalOrder": {
      "type": "object",
      "properties": {
        "orderID": {
          "type": "string"
        },
        "market": {
          "type": "string"
        },
        "side": {
          "$ref": "#/definitions/apiSide"
        },
        "types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonOrderType"
          }
        },
        "price": {
          "type": "number",
          "format": "double"
        },
        "size": {
          "type": "number",
          "format": "double"
        },
        "remainingSize": {
          "type": "number",
          "format": "double"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "clientOrderID": {
          "type": "string"
        },
        "openOrderAccount": {
          "type": "string"
        }
      }
    },
    "apiMarket": {
      "type": "object",
      "properties": {
        "market": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/apiMarketStatus"
        },
        "address": {
          "type": "string"
        },
        "baseMint": {
          "type": "string"
        },
        "quotedMint": {
          "type": "string"
        },
        "baseDecimals": {
          "type": "string",
          "format": "int64"
        },
        "quoteDecimals": {
          "type": "string",
          "format": "int64"
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        }
      }
    },
    "apiMarketDepthItem": {
      "type": "object",
      "properties": {
        "price": {
          "type": "number",
          "format": "double"
        },
        "size": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiMarketStatus": {
      "type": "string",
      "enum": [
        "MS_UNKNOWN",
        "MS_ONLINE"
      ],
      "default": "MS_UNKNOWN"
    },
    "apiOrder": {
      "type": "object",
      "properties": {
        "orderID": {
          "type": "string"
        },
        "market": {
          "type": "string"
        },
        "side": {
          "$ref": "#/definitions/apiSide"
        },
        "types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonOrderType"
          }
        },
        "price": {
          "type": "number",
          "format": "double"
        },
        "remainingSize": {
          "type": "number",
          "format": "double"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "clientOrderID": {
          "type": "string"
        },
        "openOrderAccount": {
          "type": "string"
        }
      }
    },
    "apiOrderStatus": {
      "type": "string",
      "enum": [
        "OS_UNKNOWN",
        "OS_OPEN",
        "OS_PARTIAL_FILL",
        "OS_CANCELLED",
        "OS_FILLED"
      ],
      "default": "OS_UNKNOWN"
    },
    "apiOrderbookItem": {
      "type": "object",
      "properties": {
        "price": {
          "type": "number",
          "format": "double"
        },
        "size": {
          "type": "number",
          "format": "double"
        },
        "orderID": {
          "type": "string",
          "description": "Serum generated OrderID"
        },
        "clientOrderID": {
          "type": "string",
          "format": "uint64"
        },
        "ownerAddress": {
          "type": "string",
          "description": "OpenOrders address for current market"
        }
      }
    },
    "apiPerpOrder": {
      "type": "object",
      "properties": {
        "orderID": {
          "type": "string",
          "format": "uint64"
        },
        "clientOrderID": {
          "type": "string",
          "format": "uint64"
        },
        "contract": {
          "$ref": "#/definitions/commonPerpContract"
        },
        "positionSide": {
          "$ref": "#/definitions/commonPerpPositionSide"
        },
        "orderType": {
          "type": "string"
        },
        "price": {
          "type": "number",
          "format": "double"
        },
        "size": {
          "type": "number",
          "format": "double"
        },
        "remainingSize": {
          "type": "number",
          "format": "double"
        },
        "status": {
          "type": "string"
        },
        "accountAddress": {
          "type": "string"
        },
        "subAccountID": {
          "type": "string",
          "format": "uint64"
        },
        "postOnly": {
          "type": "boolean"
        }
      }
    },
    "apiPerpOrderbookItem": {
      "type": "object",
      "properties": {
        "price": {
          "type": "number",
          "format": "double"
        },
        "size": {
          "type": "number",
          "format": "double"
        },
        "orderID": {
          "type": "string",
          "description": "platform generated OrderID"
        },
        "clientOrderID": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "orderType": {
          "type": "string"
        },
        "slot": {
          "type": "string",
          "format": "int64"
        },
        "reduceOnly": {
          "type": "boolean"
        },
        "triggerPrice": {
          "type": "number",
          "format": "double"
        },
        "triggerCondition": {
          "type": "string"
        },
        "postOnly": {
          "type": "boolean"
        },
        "oraclePriceOffset": {
          "type": "number",
          "format": "double"
        },
        "auctionDuration": {
          "type": "integer",
          "format": "int32"
        },
        "auctionStartPrice": {
          "type": "number",
          "format": "double"
        },
        "auctionEndPrice": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiPerpPosition": {
      "type": "object",
      "properties": {
        "contract": {
          "$ref": "#/definitions/commonPerpContract"
        },
        "volumeAvailable": {
          "type": "number",
          "format": "double"
        },
        "volumeInOrder": {
          "type": "number",
          "format": "double"
        },
        "positionMargin": {
          "type": "number",
          "format": "double"
        },
        "positionSide": {
          "$ref": "#/definitions/commonPerpPositionSide"
        },
        "notionalValue": {
          "type": "number",
          "format": "double"
        },
        "indexPrice": {
          "type": "number",
          "format": "double"
        },
        "liquidationPrice": {
          "type": "number",
          "format": "double"
        },
        "accountAddress": {
          "type": "string"
        },
        "subAccountID": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "apiPoolReserves": {
      "type": "object",
      "properties": {
        "token1Reserves": {
          "type": "string"
        },
        "token1Address": {
          "type": "string"
        },
        "token2Reserves": {
          "type": "string"
        },
        "token2Address": {
          "type": "string"
        },
        "poolAddress": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        }
      }
    },
    "apiPostCancelAllRequest": {
      "type": "object",
      "properties": {
        "market": {
          "type": "string",
          "required": [
            "market"
          ]
        },
        "ownerAddress": {
          "type": "string",
          "required": [
            "ownerAddress"
          ]
        },
        "openOrdersAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        }
      },
      "required": [
        "market",
        "ownerAddress"
      ]
    },
    "apiPostCancelAllResponse": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTransactionMessage"
          }
        }
      }
    },
    "apiPostCancelByClientOrderIDRequest": {
      "type": "object",
      "properties": {
        "clientOrderID": {
          "type": "string",
          "format": "uint64",
          "required": [
            "clientOrderID"
          ]
        },
        "marketAddress": {
          "type": "string",
          "required": [
            "marketAddress"
          ]
        },
        "ownerAddress": {
          "type": "string",
          "required": [
            "ownerAddress"
          ]
        },
        "openOrdersAddress": {
          "type": "string",
          "required": [
            "openOrdersAddress"
          ]
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        }
      },
      "required": [
        "clientOrderID",
        "marketAddress",
        "ownerAddress",
        "openOrdersAddress"
      ]
    },
    "apiPostCancelDriftMarginOrderRequest": {
      "type": "object",
      "properties": {
        "ownerAddress": {
          "type": "string"
        },
        "accountAddress": {
          "type": "string"
        },
        "clientOrderID": {
          "type": "string",
          "format": "uint64"
        },
        "orderID": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "apiPostCancelDriftMarginOrderResponse": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTransactionMessage"
          }
        }
      }
    },
    "apiPostCancelOrderRequest": {
      "type": "object",
      "properties": {
        "orderID": {
          "type": "string",
          "required": [
            "orderID"
          ]
        },
        "side": {
          "$ref": "#/definitions/apiSide"
        },
        "marketAddress": {
          "type": "string",
          "required": [
            "marketAddress"
          ]
        },
        "ownerAddress": {
          "type": "string",
          "required": [
            "ownerAddress"
          ]
        },
        "openOrdersAddress": {
          "type": "string",
          "required": [
            "openOrdersAddress"
          ]
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        }
      },
      "required": [
        "orderID",
        "marketAddress",
        "ownerAddress",
        "openOrdersAddress"
      ]
    },
    "apiPostCancelOrderResponse": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/apiTransactionMessage"
        }
      }
    },
    "apiPostCancelPerpOrderRequest": {
      "type": "object",
      "properties": {
        "ownerAddress": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        },
        "contract": {
          "$ref": "#/definitions/commonPerpContract"
        },
        "clientOrderID": {
          "type": "string",
          "format": "uint64"
        },
        "orderID": {
          "type": "string",
          "format": "uint64"
        },
        "accountAddress": {
          "type": "string"
        }
      }
    },
    "apiPostCancelPerpOrderResponse": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/apiTransactionMessage"
        }
      }
    },
    "apiPostCancelPerpOrdersRequest": {
      "type": "object",
      "properties": {
        "ownerAddress": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        },
        "contract": {
          "$ref": "#/definitions/commonPerpContract"
        },
        "accountAddress": {
          "type": "string"
        }
      }
    },
    "apiPostCancelPerpOrdersResponse": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTransactionMessage"
          }
        }
      }
    },
    "apiPostClosePerpPositionsRequest": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/apiProject"
        },
        "ownerAddress": {
          "type": "string"
        },
        "accountAddress": {
          "type": "string"
        },
        "contracts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonPerpContract"
          }
        }
      }
    },
    "apiPostClosePerpPositionsResponse": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTransactionMessage"
          }
        }
      }
    },
    "apiPostCreateUserRequest": {
      "type": "object",
      "properties": {
        "ownerAddress": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        },
        "action": {
          "type": "string"
        },
        "subAccountID": {
          "type": "string",
          "format": "uint64"
        },
        "accountName": {
          "type": "string"
        }
      }
    },
    "apiPostCreateUserResponse": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/apiTransactionMessage"
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        }
      }
    },
    "apiPostDriftEnableMarginTradingRequest": {
      "type": "object",
      "properties": {
        "ownerAddress": {
          "type": "string"
        },
        "accountAddress": {
          "type": "string"
        },
        "enableMargin": {
          "type": "boolean"
        }
      }
    },
    "apiPostDriftEnableMarginTradingResponse": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/apiTransactionMessage"
        }
      }
    },
    "apiPostDriftMarginOrderRequest": {
      "type": "object",
      "properties": {
        "ownerAddress": {
          "type": "string"
        },
        "accountAddress": {
          "type": "string"
        },
        "market": {
          "type": "string"
        },
        "positionSide": {
          "type": "string"
        },
        "slippage": {
          "type": "number",
          "format": "double"
        },
        "type": {
          "type": "string"
        },
        "amount": {
          "type": "number",
          "format": "double"
        },
        "price": {
          "type": "number",
          "format": "double"
        },
        "clientOrderID": {
          "type": "string",
          "format": "uint64"
        },
        "postOnly": {
          "$ref": "#/definitions/commonPostOnlyParams"
        }
      }
    },
    "apiPostDriftMarginOrderResponse": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/apiTransactionMessage"
        }
      }
    },
    "apiPostLiquidatePerpRequest": {
      "type": "object",
      "properties": {
        "ownerAddress": {
          "type": "string"
        },
        "settleeAccountAddress": {
          "type": "string"
        },
        "contract": {
          "$ref": "#/definitions/commonPerpContract"
        },
        "amount": {
          "type": "number",
          "format": "double"
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        }
      }
    },
    "apiPostLiquidatePerpResponse": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/apiTransactionMessage"
        }
      }
    },
    "apiPostManageCollateralRequest": {
      "type": "object",
      "properties": {
        "accountAddress": {
          "type": "string"
        },
        "amount": {
          "type": "number",
          "format": "double"
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        },
        "type": {
          "$ref": "#/definitions/commonPerpCollateralType"
        },
        "token": {
          "$ref": "#/definitions/commonPerpCollateralToken"
        },
        "toAccountAddress": {
          "type": "string"
        }
      }
    },
    "apiPostManageCollateralResponse": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/apiTransactionMessage"
        }
      }
    },
    "apiPostModifyDriftOrderRequest": {
      "type": "object",
      "properties": {
        "ownerAddress": {
          "type": "string"
        },
        "accountAddress": {
          "type": "string"
        },
        "orderID": {
          "type": "string",
          "format": "uint64"
        },
        "newPositionSide": {
          "type": "string"
        },
        "postOnly": {
          "type": "string"
        },
        "newBaseAmount": {
          "type": "number",
          "format": "double"
        },
        "newLimitPrice": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiPostModifyDriftOrderResponse": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/apiTransactionMessage"
        }
      }
    },
    "apiPostOrderRequest": {
      "type": "object",
      "properties": {
        "ownerAddress": {
          "type": "string",
          "required": [
            "ownerAddress"
          ]
        },
        "payerAddress": {
          "type": "string",
          "required": [
            "payerAddress"
          ]
        },
        "market": {
          "type": "string",
          "required": [
            "market"
          ]
        },
        "side": {
          "$ref": "#/definitions/apiSide"
        },
        "type": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonOrderType"
          },
          "required": [
            "type"
          ]
        },
        "amount": {
          "type": "number",
          "format": "double",
          "required": [
            "amount"
          ]
        },
        "price": {
          "type": "number",
          "format": "double",
          "required": [
            "price"
          ]
        },
        "openOrdersAddress": {
          "type": "string",
          "description": "If left empty the Serum API will lookup the account which can be time consuming"
        },
        "clientOrderID": {
          "type": "string",
          "format": "uint64",
          "description": "Client defined OrderID"
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        }
      },
      "required": [
        "ownerAddress",
        "payerAddress",
        "market",
        "type",
        "amount",
        "price"
      ]
    },
    "apiPostOrderResponse": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/apiTransactionMessage"
        },
        "openOrdersAddress": {
          "type": "string"
        }
      }
    },
    "apiPostPerpOrderRequest": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/apiProject"
        },
        "ownerAddress": {
          "type": "string"
        },
        "contract": {
          "$ref": "#/definitions/commonPerpContract"
        },
        "accountAddress": {
          "type": "string"
        },
        "positionSide": {
          "$ref": "#/definitions/commonPerpPositionSide"
        },
        "slippage": {
          "type": "number",
          "format": "double"
        },
        "type": {
          "$ref": "#/definitions/commonPerpOrderType"
        },
        "amount": {
          "type": "number",
          "format": "double"
        },
        "price": {
          "type": "number",
          "format": "double"
        },
        "clientOrderID": {
          "type": "string",
          "format": "uint64"
        },
        "postOnly": {
          "$ref": "#/definitions/commonPostOnlyParams"
        }
      }
    },
    "apiPostPerpOrderResponse": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/apiTransactionMessage"
        }
      }
    },
    "apiPostReplaceOrderRequest": {
      "type": "object",
      "properties": {
        "ownerAddress": {
          "type": "string",
          "required": [
            "ownerAddress"
          ]
        },
        "payerAddress": {
          "type": "string",
          "required": [
            "payerAddress"
          ]
        },
        "market": {
          "type": "string",
          "required": [
            "market"
          ]
        },
        "side": {
          "$ref": "#/definitions/apiSide"
        },
        "type": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonOrderType"
          },
          "required": [
            "type"
          ]
        },
        "amount": {
          "type": "number",
          "format": "double",
          "required": [
            "amount"
          ]
        },
        "price": {
          "type": "number",
          "format": "double",
          "required": [
            "price"
          ]
        },
        "openOrdersAddress": {
          "type": "string",
          "description": "If left empty the Serum API will lookup the account which can be time consuming",
          "required": [
            "openOrdersAddress"
          ]
        },
        "clientOrderID": {
          "type": "string",
          "format": "uint64"
        },
        "orderID": {
          "type": "string",
          "description": "Serum generated OrderID"
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        }
      },
      "required": [
        "ownerAddress",
        "payerAddress",
        "market",
        "type",
        "amount",
        "price",
        "openOrdersAddress"
      ]
    },
    "apiPostSettlePNLRequest": {
      "type": "object",
      "properties": {
        "ownerAddress": {
          "type": "string"
        },
        "settleeAccountAddress": {
          "type": "string"
        },
        "contract": {
          "$ref": "#/definitions/commonPerpContract"
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        }
      }
    },
    "apiPostSettlePNLResponse": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/apiTransactionMessage"
        }
      }
    },
    "apiPostSettlePNLsRequest": {
      "type": "object",
      "properties": {
        "ownerAddress": {
          "type": "string"
        },
        "settleeAccountAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contract": {
          "$ref": "#/definitions/commonPerpContract"
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        }
      }
    },
    "apiPostSettlePNLsResponse": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTransactionMessage"
          }
        }
      }
    },
    "apiPostSettleRequest": {
      "type": "object",
      "properties": {
        "ownerAddress": {
          "type": "string",
          "required": [
            "ownerAddress"
          ]
        },
        "market": {
          "type": "string",
          "required": [
            "market"
          ]
        },
        "baseTokenWallet": {
          "type": "string",
          "required": [
            "baseTokenWallet"
          ]
        },
        "quoteTokenWallet": {
          "type": "string",
          "required": [
            "quoteTokenWallet"
          ]
        },
        "openOrdersAddress": {
          "type": "string",
          "description": "If left empty the Serum API will lookup the account which can be time consuming"
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        }
      },
      "required": [
        "ownerAddress",
        "market",
        "baseTokenWallet",
        "quoteTokenWallet"
      ]
    },
    "apiPostSettleResponse": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/apiTransactionMessage"
        }
      }
    },
    "apiPostSubmitBatchRequest": {
      "type": "object",
      "properties": {
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiPostSubmitRequestEntry"
          }
        },
        "submitStrategy": {
          "$ref": "#/definitions/apiSubmitStrategy"
        }
      }
    },
    "apiPostSubmitBatchResponse": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiPostSubmitBatchResponseEntry"
          }
        }
      }
    },
    "apiPostSubmitBatchResponseEntry": {
      "type": "object",
      "properties": {
        "signature": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "submitted": {
          "type": "boolean"
        }
      }
    },
    "apiPostSubmitRequest": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/apiTransactionMessage"
        },
        "skipPreFlight": {
          "type": "boolean"
        }
      }
    },
    "apiPostSubmitRequestEntry": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/apiTransactionMessage"
        },
        "skipPreFlight": {
          "type": "boolean"
        }
      }
    },
    "apiPostSubmitResponse": {
      "type": "object",
      "properties": {
        "signature": {
          "type": "string"
        }
      }
    },
    "apiProject": {
      "type": "string",
      "enum": [
        "P_UNKNOWN",
        "P_ALL",
        "P_JUPITER",
        "P_RAYDIUM",
        "P_SERUM",
        "P_OPENBOOK",
        "P_DRIFT"
      ],
      "default": "P_UNKNOWN"
    },
    "apiProjectPool": {
      "type": "object",
      "properties": {
        "pool": {
          "type": "string"
        },
        "poolAddress": {
          "type": "string"
        },
        "token1Reserves": {
          "type": "string",
          "format": "int64"
        },
        "token1MintAddress": {
          "type": "string"
        },
        "token1MintSymbol": {
          "type": "string"
        },
        "token2Reserves": {
          "type": "string",
          "format": "int64"
        },
        "token2MintAddress": {
          "type": "string"
        },
        "token2MintSymbol": {
          "type": "string"
        }
      }
    },
    "apiProjectPools": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/apiProject"
        },
        "pools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiProjectPool"
          }
        }
      }
    },
    "apiProjectQuote": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/apiProject"
        },
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiQuoteRoute"
          }
        }
      }
    },
    "apiQuoteRoute": {
      "type": "object",
      "properties": {
        "inAmount": {
          "type": "number",
          "format": "double"
        },
        "outAmount": {
          "type": "number",
          "format": "double"
        },
        "outAmountMin": {
          "type": "number",
          "format": "double"
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiQuoteStep"
          }
        }
      }
    },
    "apiQuoteStep": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/apiStepProject"
        },
        "inToken": {
          "type": "string"
        },
        "inTokenAddress": {
          "type": "string"
        },
        "outToken": {
          "type": "string"
        },
        "outTokenAddress": {
          "type": "string"
        },
        "inAmount": {
          "type": "number",
          "format": "double"
        },
        "outAmount": {
          "type": "number",
          "format": "double"
        },
        "slippage": {
          "type": "number",
          "format": "double"
        },
        "priceImpactPercent": {
          "$ref": "#/definitions/commonPriceImpactPercent"
        },
        "fee": {
          "$ref": "#/definitions/commonFee"
        },
        "outAmountMin": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiRouteStep": {
      "type": "object",
      "properties": {
        "inToken": {
          "type": "string"
        },
        "inAmount": {
          "type": "number",
          "format": "double"
        },
        "outToken": {
          "type": "string"
        },
        "outAmount": {
          "type": "number",
          "format": "double"
        },
        "outAmountMin": {
          "type": "number",
          "format": "double"
        },
        "project": {
          "$ref": "#/definitions/apiStepProject"
        }
      }
    },
    "apiRouteTradeSwapRequest": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/apiProject"
        },
        "ownerAddress": {
          "type": "string"
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiRouteStep"
          }
        }
      }
    },
    "apiSide": {
      "type": "string",
      "enum": [
        "S_UNKNOWN",
        "S_BID",
        "S_ASK"
      ],
      "default": "S_UNKNOWN"
    },
    "apiStepProject": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "apiSubmitStrategy": {
      "type": "string",
      "enum": [
        "P_UKNOWN",
        "P_SUBMIT_ALL",
        "P_ABORT_ON_FIRST_ERROR",
        "P_WAIT_FOR_CONFIRMATION"
      ],
      "default": "P_UKNOWN"
    },
    "apiTicker": {
      "type": "object",
      "properties": {
        "market": {
          "type": "string"
        },
        "marketAddress": {
          "type": "string"
        },
        "bid": {
          "type": "number",
          "format": "double"
        },
        "bidSize": {
          "type": "number",
          "format": "double"
        },
        "ask": {
          "type": "number",
          "format": "double"
        },
        "askSize": {
          "type": "number",
          "format": "double"
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        },
        "ts": {
          "type": "string",
          "format": "date-time"
        },
        "open": {
          "type": "number",
          "format": "double"
        },
        "close": {
          "type": "number",
          "format": "double"
        },
        "low": {
          "type": "number",
          "format": "double"
        },
        "high": {
          "type": "number",
          "format": "double"
        },
        "amount": {
          "type": "number",
          "format": "double"
        },
        "volume": {
          "type": "number",
          "format": "double"
        },
        "count": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiTokenAccount": {
      "type": "object",
      "properties": {
        "symbol": {
          "type": "string"
        },
        "tokenMint": {
          "type": "string"
        },
        "tokenAccount": {
          "type": "string"
        },
        "amount": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiTokenBalance": {
      "type": "object",
      "properties": {
        "symbol": {
          "type": "string"
        },
        "tokenMint": {
          "type": "string"
        },
        "settledAmount": {
          "type": "number",
          "format": "double"
        },
        "unsettledAmount": {
          "type": "number",
          "format": "double"
        },
        "openOrdersAmount": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiTokenPair": {
      "type": "object",
      "properties": {
        "inToken": {
          "type": "string"
        },
        "outToken": {
          "type": "string"
        },
        "inAmount": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiTokenPrice": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "tokenAddress": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/apiProject"
        },
        "buy": {
          "type": "number",
          "format": "double"
        },
        "buySize": {
          "type": "number",
          "format": "double"
        },
        "sell": {
          "type": "number",
          "format": "double"
        },
        "sellSize": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiTrade": {
      "type": "object",
      "properties": {
        "side": {
          "$ref": "#/definitions/apiSide"
        },
        "size": {
          "type": "number",
          "format": "double"
        },
        "fillPrice": {
          "type": "number",
          "format": "double"
        },
        "orderID": {
          "type": "string"
        },
        "isMaker": {
          "type": "boolean"
        },
        "address": {
          "type": "string"
        },
        "feeOrRebate": {
          "type": "number",
          "format": "double"
        },
        "orderPrice": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiTradeSwapRequest": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/apiProject"
        },
        "ownerAddress": {
          "type": "string"
        },
        "inToken": {
          "type": "string"
        },
        "outToken": {
          "type": "string"
        },
        "inAmount": {
          "type": "number",
          "format": "double"
        },
        "slippage": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiTradeSwapResponse": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/apiProject"
        },
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTransactionMessage"
          }
        },
        "outAmount": {
          "type": "number",
          "format": "double"
        },
        "outAmountMin": {
          "type": "number",
          "format": "double"
        },
        "priceImpact": {
          "$ref": "#/definitions/commonPriceImpactPercent"
        },
        "fees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonFee"
          }
        }
      }
    },
    "apiTransactionMessage": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string"
        },
        "isCleanup": {
          "type": "boolean"
        }
      }
    },
    "apiUnsettledAccount": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string"
        },
        "baseToken": {
          "$ref": "#/definitions/apiUnsettledAccountToken"
        },
        "quoteToken": {
          "$ref": "#/definitions/apiUnsettledAccountToken"
        }
      }
    },
    "apiUnsettledAccountToken": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "amount": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiUserDetail": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "subAccountId": {
          "type": "string",
          "format": "uint64"
        },
        "accountAddress": {
          "type": "string"
        },
        "accountName": {
          "type": "string"
        }
      }
    },
    "commonFee": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "format": "float"
        },
        "mint": {
          "type": "string"
        },
        "percent": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "commonInfinity": {
      "type": "string",
      "enum": [
        "INF_NOT",
        "INF_POSITIVE",
        "INF_NEGATIVE"
      ],
      "default": "INF_NOT"
    },
    "commonOrderType": {
      "type": "string",
      "enum": [
        "OT_MARKET",
        "OT_LIMIT",
        "OT_IOC",
        "OT_POST"
      ],
      "default": "OT_MARKET"
    },
    "commonPerpCollateralToken": {
      "type": "string",
      "enum": [
        "PCTK_USDC",
        "PCTK_SOL"
      ],
      "default": "PCTK_USDC"
    },
    "commonPerpCollateralType": {
      "type": "string",
      "enum": [
        "PCT_DEPOSIT",
        "PCT_WITHDRAWAL",
        "PCT_TRANSFER"
      ],
      "default": "PCT_DEPOSIT"
    },
    "commonPerpContract": {
      "type": "string",
      "enum": [
        "ALL",
        "SOL_PERP",
        "ETH_PERP",
        "BTC_PERP",
        "APT_PERP",
        "BONK_PERP",
        "MATIC_PERP",
        "ARB_PERP",
        "DOGE_PERP",
        "BNB_PERP",
        "SUI_PERP",
        "PEPE_PERP"
      ],
      "default": "ALL"
    },
    "commonPerpOrderType": {
      "type": "string",
      "enum": [
        "POT_UNKNOWN",
        "POT_MARKET",
        "POT_LIMIT",
        "POT_TRIGGER_MARKET",
        "POT_TRIGGER_LIMIT"
      ],
      "default": "POT_UNKNOWN",
      "title": "perp types : limit, trigger_market, trigger_limit, market, oracle"
    },
    "commonPerpPositionSide": {
      "type": "string",
      "enum": [
        "PS_UNKNOWN",
        "PS_LONG",
        "PS_SHORT"
      ],
      "default": "PS_UNKNOWN"
    },
    "commonPostOnlyParams": {
      "type": "string",
      "enum": [
        "PO_NONE",
        "PO_MUST_POST_ONLY",
        "PO_TRY_POST_ONLY"
      ],
      "default": "PO_NONE"
    },
    "commonPriceImpactPercent": {
      "type": "object",
      "properties": {
        "percent": {
          "type": "number",
          "format": "double"
        },
        "infinity": {
          "$ref": "#/definitions/commonInfinity"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "Auth Header": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "Auth Header": []
    }
  ]
}
