syntax = "proto3";
package api;
option go_package = "github.com/bloXroute-Labs/solana-trader-api/proto/api";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/api/field_behavior.proto";
import "google/api/visibility.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  security: {
    security_requirement: {
      key: "Auth Header";
      value: {
        scope: []
      }
    }
  }
  security_definitions: {
    security: {
      key: "Auth Header";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
      };
    }
  };
  info: {
    title: "Trader API";
    version: "1.1";
    description: "Easy-to-use API for interacting with trader services on the Solana blockchain, powered by bloXroute Labs.";
    contact: {
      name: "bloXroute Labs Trader API Documentation";
      url: "https://docs.bloxroute.com/solana/trader-api";
      email: "support@bloxroute.com";
    };
  };

  consumes: "application/json";
  produces: "application/json";
};

service Api {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    external_docs: {
      description: "Detailed API documentation";
      url: "https://bloxroute.gitbook.io/serum-api/about/welcome"
    }
  };

  rpc GetPrice(GetPriceRequest) returns (GetPriceResponse) {
    option (google.api.http) = {
      get: "/api/v1/market/price"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Returns the list of prices for specified tokens";
      summary: "Token prices";
      tags: ["Market", "Universal"];
    };
  }

  rpc GetMarkets(GetMarketsRequest) returns (GetMarketsResponse) {
    option (google.api.http) = {
      get: "/api/v1/market/markets"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Returns the list of orderbook markets";
      summary: "Orderbook markets";
      tags: ["Market", "Orderbook"];
    };
  }

  rpc GetPools(GetPoolsRequest) returns (GetPoolsResponse) {
    option (google.api.http) = {
      get: "/api/v1/market/pools"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Returns the list of supported AMM pools";
      summary: "AMM Pools";
      tags: ["Market", "AMM"];
    };
  }

  rpc GetTickers(GetTickersRequest) returns (GetTickersResponse) {
    option (google.api.http) = {
      get: "/api/v1/market/tickers/{market}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Returns updated ticker(s). To receive all tickers use empty string for {market} param value";
      summary: "Orderbook tickers";
      tags: ["Market", "Orderbook"];
    };
  }

  rpc GetKline(GetKlineRequest) returns (GetKlineResponse) {
    option (google.api.method_visibility).restriction = "INTERNAL";
    option (google.api.http) = {
      get: "/api/v1/market/kline/{market}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Returns the KLine per market";
      summary: "Market KLine";
      tags: ["Market", "Orderbook"];
    };
  }

  rpc GetOrderbook(GetOrderbookRequest) returns (GetOrderbookResponse) {
    option (google.api.http) = {
      get: "/api/v1/market/orderbooks/{market}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Returns market's orderbook. Use limit param to reduce the number of bids/asks returned";
      summary: "Market orderbook";
      tags: ["Market", "Orderbook"];
    };
  }

  rpc GetTrades(GetTradesRequest) returns (GetTradesResponse) {
    option (google.api.method_visibility).restriction = "INTERNAL";
    option (google.api.http) = {
      get: "/api/v1/market/trades/{market}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Returns recent trades on the market";
      summary: "Market trades";
      tags: ["Market", "Orderbook"];
    };
  }

  rpc GetQuotes(GetQuotesRequest) returns (GetQuotesResponse) {
    option (google.api.http) = {
      get: "/api/v1/market/quote"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Returns quotes from supported AMMs";
      summary: "AMM Quotes";
      tags: ["Market", "AMM"];
    };
  }

  // system API
  rpc GetServerTime(GetServerTimeRequest) returns (GetServerTimeResponse) {
    option (google.api.http) = {
      get: "/api/v1/system/time"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Returns current time on the server";
      summary: "Server time";
      tags: "System";
    };
  }

  rpc GetRecentBlockHash(GetRecentBlockHashRequest) returns (GetRecentBlockHashResponse) {
    option (google.api.http) = {
      get: "/api/v1/system/blockhash"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Returns recent block hash";
      summary: "Recent block hash";
      tags: "System";
    };
  }

  // account endpoints
  rpc GetAccountBalance(GetAccountBalanceRequest) returns (GetAccountBalanceResponse) {
    option (google.api.http) = {
      get: "/api/v1/account/balance"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Returns the all balances for a wallet";
      summary: "Account balances markets";
      tags: "Account";
    };
  }

  // trade endpoints
  rpc PostOrder(PostOrderRequest) returns (PostOrderResponse) {
    option (google.api.http) = {
      post: "/api/v1/trade/place"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Generates a NewOrderV3 unsigned transaction object";
      summary: "Unsigned NewOrderV3 transaction";
      tags: ["Trade", "Orderbook"];
    };
  }

  rpc PostSubmit(PostSubmitRequest) returns (PostSubmitResponse) {
    option (google.api.http) = {
      post: "/api/v1/trade/submit"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Submits a signed transaction";
      summary: "Transaction submit";
      tags: ["Trade", "Universal"];
    };
  }

  rpc PostSubmitBatch(PostSubmitBatchRequest) returns (PostSubmitBatchResponse) {
    option (google.api.http) = {
      post: "/api/v1/trade/submit-batch"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Submits a batch of signed transactions";
      summary: "Transaction batch submit";
      tags: ["Trade", "Universal"];
    };
  }

  rpc PostCancelOrder(PostCancelOrderRequest) returns (PostCancelOrderResponse) {
    option (google.api.http) = {
      post: "/api/v1/trade/cancel"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Generates a CancelOrder unsigned transaction object";
      summary: "Unsigned CancelOrder transaction";
      tags: ["Trade", "Orderbook"];
    };
  }

  rpc PostCancelByClientOrderID(PostCancelByClientOrderIDRequest) returns (PostCancelOrderResponse) {
    option (google.api.http) = {
      post: "/api/v1/trade/cancelbyid"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Generates a CancelOrderByID unsigned transaction object";
      summary: "Unsigned CancelOrderByID transaction";
      tags: ["Trade", "Orderbook"];
    };
  }

  rpc PostCancelAll(PostCancelAllRequest) returns (PostCancelAllResponse) {
    option (google.api.http) = {
      post: "/api/v1/trade/cancelall"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Generates a CancelAll unsigned transaction object";
      summary: "Unsigned CancelAll transaction";
      tags: ["Trade", "Orderbook"];
    };
  }

  rpc PostReplaceByClientOrderID(PostOrderRequest) returns (PostOrderResponse) {
    option (google.api.http) = {
      post: "/api/v1/trade/replacebyclientid"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Generates a ReplaceByClientOrderID unsigned transaction object";
      summary: "Unsigned ReplaceByClientOrderID transaction";
      tags: ["Trade", "Orderbook"];
    };
  }

  rpc PostReplaceOrder(PostReplaceOrderRequest) returns (PostOrderResponse) {
    option (google.api.http) = {
      post: "/api/v1/trade/replace"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Generates a ReplaceOrder unsigned transaction object";
      summary: "Unsigned ReplaceOrder transaction";
      tags: ["Trade", "Orderbook"];
    };
  }

  rpc PostSettle(PostSettleRequest) returns (PostSettleResponse) {
    option (google.api.http) = {
      post: "/api/v1/trade/settle"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Generates a SettleFunds unsigned transaction object";
      summary: "Unsigned SettleFunds transaction";
      tags: ["Trade", "Orderbook"];
    };
  }

  rpc PostTradeSwap(TradeSwapRequest) returns (TradeSwapResponse) {
    option (google.api.http) = {
      post: "/api/v1/trade/swap"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Generates an unsigned transaction object for the best available AMM swap";
      summary: "Unsigned best available AMM swap transaction";
      tags: ["Trade", "AMM"];
    };
  }

  rpc GetOrders(GetOrdersRequest) returns (GetOrdersResponse) {
    option (google.api.method_visibility).restriction = "INTERNAL";
    option (google.api.http) = {
      get: "/api/v1/trade/orders/{market}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Returns all user's orders";
      summary: "List of user's orders";
      tags: ["Trade", "Orderbook"];
    };
  }

  rpc GetOpenOrders(GetOpenOrdersRequest) returns (GetOpenOrdersResponse) {
    option (google.api.http) = {
      get: "/api/v1/trade/openorders/{market}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Returns the list of open orders per user per market";
      summary: "List of user's open orders";
      tags: ["Trade", "Orderbook"];
    };
  }

  rpc GetOrderByID(GetOrderByIDRequest) returns (GetOrderByIDResponse) {
    option (google.api.method_visibility).restriction = "INTERNAL";
    option (google.api.http) = {
      get: "/api/v1/trade/orderbyid/{orderID}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Returns an order by ID";
      summary: "Order by ID";
      tags: ["Trade", "Orderbook"];
    };
  }

  rpc GetUnsettled(GetUnsettledRequest) returns (GetUnsettledResponse) {
    option (google.api.http) = {
      get: "/api/v1/trade/unsettled/{market}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Returns the unsettled amounts of user in a market";
      summary: "Unsettled amounts";
      tags: ["Trade", "Orderbook"];
    };
  }

  rpc PostRouteTradeSwap(RouteTradeSwapRequest) returns (TradeSwapResponse) {
    option(google.api.http) = {
      post: "/api/v1/trade/route-swap"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Generates an unsigned transaction object for the AMM swap on the specified route";
      summary: "Unsigned AMM swap transaction along route";
      tags: ["Trade", "AMM"];
    };
  }

  // streaming endpoints
  rpc GetOrderbooksStream(GetOrderbooksRequest) returns (stream GetOrderbooksStreamResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Trade";
    };
  }

  rpc GetTickersStream(GetTickersRequest) returns (stream GetTickersStreamResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Trade";
    };
  }

  rpc GetMarketDepthStream(GetMarketsRequest) returns (stream GetMarketDepthStreamResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Trade";
    };
  }

  rpc GetTradesStream(GetTradesRequest) returns (stream GetTradesStreamResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Trade";
    };
  }

  rpc GetOrderStatusStream(GetOrderStatusStreamRequest) returns (stream GetOrderStatusStreamResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Trade";
    };
  }

  rpc GetRecentBlockHashStream(GetRecentBlockHashRequest) returns (stream GetRecentBlockHashResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "System";
    };
  }

  rpc GetQuotesStream(GetQuotesStreamRequest) returns (stream GetQuotesStreamResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "AMMs";
    };
  }

  rpc GetPoolReservesStream(GetPoolReservesStreamRequest) returns (stream GetPoolReservesStreamResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "AMMs";
    };
  }

  rpc GetPricesStream(GetPricesStreamRequest) returns (stream GetPricesStreamResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "AMMs";
    };
  }

  rpc GetSwapsStream(GetSwapsStreamRequest) returns (stream GetSwapsStreamResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "AMMs";
    };
  }
}

message GetMarketsRequest {

}

message GetMarketsResponse {
  map<string, Market> markets = 1;
}

message Market {
  string market = 1;
  MarketStatus status = 2;
  string address = 3;
  string baseMint = 4;
  string quotedMint = 5;
  int64 baseDecimals = 6;
  int64 quoteDecimals = 7;
}

enum MarketStatus {
  MS_UNKNOWN = 0;
  MS_ONLINE = 1;
}

message GetTickersRequest {
  string market = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Use empty string for all markets"}];
}

message GetTickersResponse {
  repeated Ticker tickers = 1;
}

message Ticker {
  string market = 1;
  string marketAddress = 2;
  double bid = 3;
  double bidSize = 4;
  double ask = 5;
  double askSize = 6;
}

message GetKlineRequest {
  string market = 1;
  google.protobuf.Timestamp from = 2;
  google.protobuf.Timestamp to = 3;
  string resolution = 4; // indicates a duration: e.g. 1d, 4h, 1h, 30m, 15m, 1m
  uint32 limit = 5;
}

message GetKlineResponse {
  string market = 1;
  google.protobuf.Timestamp timestamp = 2;
  repeated Candle candles = 3;
}

message Candle {
  google.protobuf.Timestamp startTime = 1;
  google.protobuf.Timestamp updateTime = 2;
  double open = 3;
  double close = 4;
  double low = 5;
  double high = 6;
  double amount = 7;
  double volume = 8;
  double count = 9;
}

message GetOrderbookRequest {
  string market = 1;
  uint32 limit = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Use 0 for no limits"}];
}

message GetOrderbooksRequest {
  repeated string markets = 1;
  uint32 limit = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Use 0 for no limits"}];
}

message GetOrderbookResponse {
  string market = 1;
  string marketAddress = 2;
  repeated OrderbookItem bids = 3;
  repeated OrderbookItem asks = 4;
}

message OrderbookItem {
  double price = 1;
  double size = 2;
}

message GetTradesRequest {
  string market = 1;
  uint32 limit = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Use 0 for no limits"}];
}

message GetTradesResponse {
  repeated Trade trades = 1;
}

message Trade {
  Side side = 1;
  double size = 2;
  double fillPrice = 3;
  string orderID = 4;
  bool isMaker = 5;
  string address = 6;
  double feeOrRebate = 7;
  double orderPrice = 8;
}

message GetServerTimeRequest {}

message GetServerTimeResponse {
  string timestamp = 1;
}

message GetAccountBalanceRequest {
  string ownerAddress = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetAccountBalanceResponse {
  repeated TokenBalance tokens = 1;
}

message TokenBalance {
  string symbol = 1;
  string address = 2;
  double walletAmount = 3;
  double unsettledAmount = 4;
  double openOrdersAmount = 5;
}

message PostOrderRequest {
  string ownerAddress = 1 [(google.api.field_behavior) = REQUIRED];
  string payerAddress = 2 [(google.api.field_behavior) = REQUIRED];
  string market = 3 [(google.api.field_behavior) = REQUIRED];
  Side side = 4 [(google.api.field_behavior) = REQUIRED];
  repeated OrderType type = 5 [(google.api.field_behavior) = REQUIRED];
  double amount = 6 [(google.api.field_behavior) = REQUIRED];
  double price = 7 [(google.api.field_behavior) = REQUIRED];
  string openOrdersAddress = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "If left empty the Serum API will lookup the account which can be time consuming"}];
  uint64 clientOrderID = 9 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Client defined OrderID"}];
}

message PostReplaceOrderRequest {
  string ownerAddress = 1 [(google.api.field_behavior) = REQUIRED];
  string payerAddress = 2 [(google.api.field_behavior) = REQUIRED];
  string market = 3 [(google.api.field_behavior) = REQUIRED];
  Side side = 4 [(google.api.field_behavior) = REQUIRED];
  repeated OrderType type = 5 [(google.api.field_behavior) = REQUIRED];
  double amount = 6 [(google.api.field_behavior) = REQUIRED];
  double price = 7 [(google.api.field_behavior) = REQUIRED];
  string openOrdersAddress = 8 [(google.api.field_behavior) = REQUIRED, (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "If left empty the Serum API will lookup the account which can be time consuming"}];
  uint64 clientOrderID = 9;
  string orderID = 10 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Serum generated OrderID"}];
}

enum Side {
  S_UNKNOWN = 0;
  S_BID = 1;
  S_ASK = 2;
}

enum OrderType {
  OT_MARKET = 0;
  OT_LIMIT = 1; // MARKET and LIMIT are mutually exclusive
  OT_IOC = 2; // immediate or cancel
  OT_POST = 3;
}

message PostOrderResponse {
  TransactionMessage transaction = 1;
  string openOrdersAddress = 2;
}

message PostCancelOrderRequest {
  string orderID = 1 [(google.api.field_behavior) = REQUIRED];
  Side side = 2 [(google.api.field_behavior) = REQUIRED];
  string marketAddress = 3 [(google.api.field_behavior) = REQUIRED];
  string ownerAddress = 4 [(google.api.field_behavior) = REQUIRED];
  string openOrdersAddress = 5 [(google.api.field_behavior) = REQUIRED];
}

message PostCancelByClientOrderIDRequest {
  uint64 clientOrderID = 1 [(google.api.field_behavior) = REQUIRED];
  string marketAddress = 2 [(google.api.field_behavior) = REQUIRED];
  string ownerAddress = 3 [(google.api.field_behavior) = REQUIRED];
  string openOrdersAddress = 4 [(google.api.field_behavior) = REQUIRED];
}

message PostCancelOrderResponse {
  TransactionMessage transaction = 1;
}

message PostCancelAllRequest {
  string market = 1 [(google.api.field_behavior) = REQUIRED];
  string ownerAddress = 2 [(google.api.field_behavior) = REQUIRED];
  repeated string openOrdersAddresses = 3;
}

message TransactionMessage {
  string content = 1;
  bool isCleanup = 2;
}

message PostCancelAllResponse {
  repeated TransactionMessage transactions = 1;
}

message PostSettleRequest {
  string ownerAddress = 1 [(google.api.field_behavior) = REQUIRED];
  string market = 2 [(google.api.field_behavior) = REQUIRED];
  string baseTokenWallet = 3 [(google.api.field_behavior) = REQUIRED];
  string quoteTokenWallet = 4 [(google.api.field_behavior) = REQUIRED];
  string openOrdersAddress = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "If left empty the Serum API will lookup the account which can be time consuming"}];
}

message PostSettleResponse {
  TransactionMessage transaction = 1;
}

message Settlement {
  string symbol = 1;
  double unsettled = 2;
  double amount = 3;
}

message GetOrdersRequest {
  string market = 1;
  OrderStatus status = 2;
  Side side = 3;
  repeated OrderType types = 4;
  google.protobuf.Timestamp from = 5;
  uint32 limit = 6;
  Direction direction = 7;
  string address = 8;
  string openOrdersAddress = 9;
}

enum OrderStatus {
  OS_UNKNOWN = 0;
  OS_OPEN = 1;
  OS_PARTIAL_FILL = 2;
  OS_CANCELLED = 3;
  OS_FILLED = 4;
}

enum Direction {
  D_ASCENDING = 0;
  D_DESCENDING = 1;
}

message GetOrdersResponse {
  repeated Order orders = 1;
}

message Order {
  string orderID = 1;
  string market = 2;
  Side side = 3;
  repeated OrderType types = 4;
  double price = 5;
  double remainingSize = 6;
  google.protobuf.Timestamp createdAt = 7;
  string clientOrderID = 8;
  string openOrderAccount = 9;
}

message GetOrderStatusStreamRequest {
  string market = 1;
  string ownerAddress = 2;
}

message GetOrderStatusStreamResponse {
  int64 slot = 1;
  GetOrderStatusResponse orderInfo = 2;
}

message GetOrderStatusResponse {
  string market = 1;
  string openOrderAddress = 2;
  string orderID = 3;
  uint64 clientOrderID = 4;
  float quantityReleased = 5;
  float quantityRemaining = 6;
  float fillPrice = 7;
  Side side = 8;
  OrderStatus orderStatus = 9;
  float orderPrice = 10;
}

message PostSubmitRequest {
  TransactionMessage transaction = 1 [(google.api.field_behavior) = REQUIRED];
  bool skipPreFlight = 2;
}

message PostSubmitRequestEntry {
  TransactionMessage transaction = 1 [(google.api.field_behavior) = REQUIRED];
  bool skipPreFlight = 2;
}

enum SubmitStrategy {
  P_UKNOWN = 0;
  P_SUBMIT_ALL = 1;
  P_ABORT_ON_FIRST_ERROR = 2;
  P_WAIT_FOR_CONFIRMATION = 3;
}

message PostSubmitBatchRequest {
  repeated PostSubmitRequestEntry entries = 1;
  SubmitStrategy SubmitStrategy = 2;
}

message PostSubmitResponse {
  string signature = 1;
}

message PostSubmitBatchResponseEntry {
  string signature = 1;
  string error = 2;
  bool submitted = 3;
}

message PostSubmitBatchResponse {
  repeated PostSubmitBatchResponseEntry transactions = 1;
}

message GetOpenOrdersRequest {
  string market = 1 [(google.api.field_behavior) = REQUIRED];
  uint32 limit = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Use 0 for no limits"}];
  string address = 3 [(google.api.field_behavior) = OPTIONAL];
  string openOrdersAddress = 4 [(google.api.field_behavior) = OPTIONAL, (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "If left empty the Serum API will lookup the account which can be time consuming, Setting both address and openOrdersAddress is invalid, openOrdersAddress is preferred."}];
}

message GetOpenOrdersResponse {
  repeated Order orders = 1;
}

message GetOrderByIDRequest {
  string orderID = 1 [(google.api.field_behavior) = REQUIRED];
  string market = 2;
}

message GetOrderByIDResponse {
  Order order = 1;
}

message GetUnsettledRequest {
  string market = 1 [(google.api.field_behavior) = REQUIRED];
  string ownerAddress = 2 [(google.api.field_behavior) = REQUIRED];
}

message UnsettledAccountToken {
  string address = 1;
  double amount = 2;
}

message UnsettledAccount {
  string account = 1;
  UnsettledAccountToken baseToken = 2;
  UnsettledAccountToken quoteToken = 3;
}

message GetUnsettledResponse {
  string market = 1;
  repeated UnsettledAccount unsettled = 2;
}

message GetOrderbooksStreamResponse {
  int64 slot = 1;
  GetOrderbookResponse orderbook = 2;
}

message GetTickersStreamResponse {
  int64 slot = 1;
  GetTickersResponse ticker = 2;
}

message GetMarketDepthRequest {
  string market = 1 [(google.api.field_behavior) = REQUIRED];
  int32 depth = 2 [(google.api.field_behavior) = REQUIRED];
  Step step = 3;
}

enum Step {
  STEP0 = 0;
  STEP1 = 1;
  STEP2 = 2;
  STEP3 = 3;
}

message GetMarketDepthStreamResponse {
  int64 slot = 1;
  MarketDepthTick tick = 2;
}

message MarketDepthTick {
  int64 prevSlot = 1;
  repeated OrderbookItem asks = 2;
  repeated OrderbookItem bids = 3;
}

message GetTradesStreamResponse {
  int64 slot = 1;
  GetTradesResponse trades = 2;
}

message GetQuotesRequest{
  string inToken = 1;
  string outToken = 2;
  double inAmount = 3;
  double slippage = 4;
  int32 limit = 5;
  repeated Project projects = 6;
}

message GetQuotesResponse{
  string inToken = 1;
  string inTokenAddress = 2;
  string outToken = 3;
  string outTokenAddress = 4;
  double inAmount = 5;
  repeated ProjectQuote quotes = 6;
}

message ProjectQuote {
  Project project = 1;
  repeated QuoteRoute routes = 2;
}

message TradeSwapRequest {
  Project project = 1;
  string ownerAddress = 2;
  string inToken = 3;
  string outToken = 4;
  double inAmount = 5;
  double slippage = 6;
}

message RouteTradeSwapRequest {
  Project project = 1;
  string ownerAddress = 2;
  repeated RouteStep steps = 3;
}

message RouteStep {
  string inToken = 1;
  double inAmount = 2;
  string outToken = 3;
  double outAmount = 4;
  double outAmountMin = 5;
  StepProject project = 6;
}

message TradeSwapResponse{
  Project project = 1;
  repeated TransactionMessage transactions = 2;
  double outAmount = 3;
  double outAmountMin = 4;
  PriceImpactPercent priceImpact = 5;
  repeated Fee fees = 6;
}

enum Project {
  P_UNKNOWN = 0;
  P_JUPITER = 1;
  P_RAYDIUM = 2;
  P_SERUM = 3;
  P_ALL = 4;
}

message QuoteRoute {
  double inAmount = 1;
  double outAmount = 2;
  double outAmountMin = 3;
  repeated QuoteStep steps = 4;
}

message QuoteStep {
  StepProject project = 1;
  string inToken = 2;
  string inTokenAddress = 3;
  string outToken = 4;
  string outTokenAddress = 5;
  double inAmount = 6;
  double outAmount = 7;
  double slippage = 8;
  PriceImpactPercent priceImpactPercent = 9;
  Fee fee = 10;
  double outAmountMin = 11;
  string poolAddress = 12;
}

message StepProject {
  string label = 1;
  string id = 2;
}

message Fee {
  float amount = 1;
  string mint = 2;
  float percent = 3;
}

message PriceImpactPercent {
  double percent = 1;
  Infinity infinity = 2;
}

enum Infinity {
  INF_NOT = 0;
  INF_POSITIVE = 1;
  INF_NEGATIVE = 2;
}

message GetRecentBlockHashRequest {

}

message GetRecentBlockHashResponse {
  string blockHash = 1;
}

message GetPoolsRequest {
  repeated Project projects = 1;
}

message GetPoolsResponse {
  repeated ProjectPools projects = 1;
}

message ProjectPools {
  Project project = 1;
  repeated ProjectPool pools = 2;
}

message ProjectPool {
  string pool = 1;
  string poolAddress = 2;

  int64 token1Reserves = 3;
  string token1MintAddress = 4;
  string token1MintSymbol = 5;

  int64 token2Reserves = 6;
  string token2MintAddress = 7;
  string token2MintSymbol = 8;
}

message GetQuotesStreamRequest {
  repeated Project   projects = 1;
  repeated TokenPair tokenPairs = 2;
}

message GetQuotesStreamResponse {
  int64 slot = 1;
  GetQuotesStreamUpdate quote = 2;
}

message GetQuotesStreamUpdate {
  string inToken = 1;
  string inTokenAddress = 2;
  string outToken = 3;
  string outTokenAddress = 4;
  double inAmount = 5;
  double outAmount = 6;
  Project project = 7;
}

message GetSwapsStreamRequest {
  repeated Project projects = 1;
  repeated string pools = 2;
  bool includeFailed = 3;
}

message GetSwapsStreamResponse {
  int64 slot = 1;
  GetSwapsStreamUpdate swap = 2;
}

message GetSwapsStreamUpdate {
  bool success = 1;
  Project project = 2;
  string poolAddress = 3;
  string baseToken = 4;
  string baseTokenAddress = 5;
  string quoteToken = 6;
  string quoteTokenAddress = 7;
  uint64 inAmount = 8;
  uint64 outAmountMin = 9;
  string sourceAccount = 10;
  string destinationAccount = 11;
  string ownerAccount = 12;
  string signature = 13;
}

message TokenPair {
  string inToken = 1;
  string outToken = 2;
  double inAmount = 3;
}

message GetPriceRequest {
  repeated string tokens = 1;
}

message GetPriceResponse {
  repeated TokenPrice tokenPrices = 1;
}

message TokenPrice {
  string token = 1;
  string tokenAddress = 2;
  Project project = 3;
  double buy = 4;
  double buySize = 5;
  double sell = 6;
  double sellSize = 7;
}

message GetPoolReservesStreamResponse {
  int64 slot = 1;
  PoolReserves reserves = 2;
}

message PoolReserves {
  string token1Reserves = 1;
  string token1Address = 2;
  string token2Reserves = 3;
  string token2Address = 4;
  string poolAddress = 5;
  Project project = 6;
}

message GetPoolReservesStreamRequest {
  repeated Project projects = 1;
}

message GetPricesStreamRequest {
  repeated Project projects = 1;
  repeated string tokens = 2;
}

message GetPricesStreamResponse {
  int64 slot = 1;
  TokenPrice price = 2;
}


