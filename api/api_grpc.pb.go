// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiClient interface {
	GetRateLimit(ctx context.Context, in *GetRateLimitRequest, opts ...grpc.CallOption) (*GetRateLimitResponse, error)
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error)
	PostSubmitV2(ctx context.Context, in *PostSubmitRequest, opts ...grpc.CallOption) (*PostSubmitResponse, error)
	PostSubmitBatchV2(ctx context.Context, in *PostSubmitBatchRequest, opts ...grpc.CallOption) (*PostSubmitBatchResponse, error)
	// Raydium V2
	GetRaydiumPools(ctx context.Context, in *GetRaydiumPoolsRequest, opts ...grpc.CallOption) (*GetRaydiumPoolsResponse, error)
	GetRaydiumPoolReserve(ctx context.Context, in *GetRaydiumPoolReserveRequest, opts ...grpc.CallOption) (*GetRaydiumPoolReserveResponse, error)
	GetRaydiumQuotes(ctx context.Context, in *GetRaydiumQuotesRequest, opts ...grpc.CallOption) (*GetRaydiumQuotesResponse, error)
	GetRaydiumPrices(ctx context.Context, in *GetRaydiumPricesRequest, opts ...grpc.CallOption) (*GetRaydiumPricesResponse, error)
	PostRaydiumSwap(ctx context.Context, in *PostRaydiumSwapRequest, opts ...grpc.CallOption) (*PostRaydiumSwapResponse, error)
	PostRaydiumRouteSwap(ctx context.Context, in *PostRaydiumRouteSwapRequest, opts ...grpc.CallOption) (*PostRaydiumRouteSwapResponse, error)
	// Jupiter V2
	GetJupiterQuotes(ctx context.Context, in *GetJupiterQuotesRequest, opts ...grpc.CallOption) (*GetJupiterQuotesResponse, error)
	GetJupiterPrices(ctx context.Context, in *GetJupiterPricesRequest, opts ...grpc.CallOption) (*GetJupiterPricesResponse, error)
	PostJupiterSwap(ctx context.Context, in *PostJupiterSwapRequest, opts ...grpc.CallOption) (*PostJupiterSwapResponse, error)
	PostJupiterSwapInstructions(ctx context.Context, in *PostJupiterSwapInstructionsRequest, opts ...grpc.CallOption) (*PostJupiterSwapInstructionsResponse, error)
	PostJupiterRouteSwap(ctx context.Context, in *PostJupiterRouteSwapRequest, opts ...grpc.CallOption) (*PostJupiterRouteSwapResponse, error)
	GetMarketsV2(ctx context.Context, in *GetMarketsRequestV2, opts ...grpc.CallOption) (*GetMarketsResponseV2, error)
	GetTickersV2(ctx context.Context, in *GetTickersRequestV2, opts ...grpc.CallOption) (*GetTickersResponseV2, error)
	GetOrderbookV2(ctx context.Context, in *GetOrderbookRequestV2, opts ...grpc.CallOption) (*GetOrderbookResponseV2, error)
	GetMarketDepthV2(ctx context.Context, in *GetMarketDepthRequestV2, opts ...grpc.CallOption) (*GetMarketDepthResponseV2, error)
	PostOrderV2(ctx context.Context, in *PostOrderRequestV2, opts ...grpc.CallOption) (*PostOrderResponse, error)
	PostCancelOrderV2(ctx context.Context, in *PostCancelOrderRequestV2, opts ...grpc.CallOption) (*PostCancelOrderResponseV2, error)
	PostReplaceOrderV2(ctx context.Context, in *PostReplaceOrderRequestV2, opts ...grpc.CallOption) (*PostOrderResponse, error)
	PostSettleV2(ctx context.Context, in *PostSettleRequestV2, opts ...grpc.CallOption) (*PostSettleResponse, error)
	GetOpenOrdersV2(ctx context.Context, in *GetOpenOrdersRequestV2, opts ...grpc.CallOption) (*GetOpenOrdersResponseV2, error)
	GetUnsettledV2(ctx context.Context, in *GetUnsettledRequestV2, opts ...grpc.CallOption) (*GetUnsettledResponse, error)
	GetPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*GetPriceResponse, error)
	GetMarkets(ctx context.Context, in *GetMarketsRequest, opts ...grpc.CallOption) (*GetMarketsResponse, error)
	GetPools(ctx context.Context, in *GetPoolsRequest, opts ...grpc.CallOption) (*GetPoolsResponse, error)
	GetTickers(ctx context.Context, in *GetTickersRequest, opts ...grpc.CallOption) (*GetTickersResponse, error)
	GetKline(ctx context.Context, in *GetKlineRequest, opts ...grpc.CallOption) (*GetKlineResponse, error)
	GetOrderbook(ctx context.Context, in *GetOrderbookRequest, opts ...grpc.CallOption) (*GetOrderbookResponse, error)
	GetMarketDepth(ctx context.Context, in *GetMarketDepthRequest, opts ...grpc.CallOption) (*GetMarketDepthResponse, error)
	GetTrades(ctx context.Context, in *GetTradesRequest, opts ...grpc.CallOption) (*GetTradesResponse, error)
	GetQuotes(ctx context.Context, in *GetQuotesRequest, opts ...grpc.CallOption) (*GetQuotesResponse, error)
	// system API
	GetServerTime(ctx context.Context, in *GetServerTimeRequest, opts ...grpc.CallOption) (*GetServerTimeResponse, error)
	GetRecentBlockHash(ctx context.Context, in *GetRecentBlockHashRequest, opts ...grpc.CallOption) (*GetRecentBlockHashResponse, error)
	GetPriorityFee(ctx context.Context, in *GetPriorityFeeRequest, opts ...grpc.CallOption) (*GetPriorityFeeResponse, error)
	// account endpoints
	GetAccountBalance(ctx context.Context, in *GetAccountBalanceRequest, opts ...grpc.CallOption) (*GetAccountBalanceResponse, error)
	GetTokenAccounts(ctx context.Context, in *GetTokenAccountsRequest, opts ...grpc.CallOption) (*GetTokenAccountsResponse, error)
	GetAccountBalanceV2(ctx context.Context, in *GetAccountBalanceRequest, opts ...grpc.CallOption) (*GetAccountBalanceResponse, error)
	// trade endpoints
	PostOrder(ctx context.Context, in *PostOrderRequest, opts ...grpc.CallOption) (*PostOrderResponse, error)
	PostSubmit(ctx context.Context, in *PostSubmitRequest, opts ...grpc.CallOption) (*PostSubmitResponse, error)
	PostSubmitBatch(ctx context.Context, in *PostSubmitBatchRequest, opts ...grpc.CallOption) (*PostSubmitBatchResponse, error)
	PostCancelOrder(ctx context.Context, in *PostCancelOrderRequest, opts ...grpc.CallOption) (*PostCancelOrderResponse, error)
	PostCancelByClientOrderID(ctx context.Context, in *PostCancelByClientOrderIDRequest, opts ...grpc.CallOption) (*PostCancelOrderResponse, error)
	PostCancelAll(ctx context.Context, in *PostCancelAllRequest, opts ...grpc.CallOption) (*PostCancelAllResponse, error)
	PostReplaceByClientOrderID(ctx context.Context, in *PostOrderRequest, opts ...grpc.CallOption) (*PostOrderResponse, error)
	PostReplaceOrder(ctx context.Context, in *PostReplaceOrderRequest, opts ...grpc.CallOption) (*PostOrderResponse, error)
	PostSettle(ctx context.Context, in *PostSettleRequest, opts ...grpc.CallOption) (*PostSettleResponse, error)
	PostTradeSwap(ctx context.Context, in *TradeSwapRequest, opts ...grpc.CallOption) (*TradeSwapResponse, error)
	GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error)
	GetOpenOrders(ctx context.Context, in *GetOpenOrdersRequest, opts ...grpc.CallOption) (*GetOpenOrdersResponse, error)
	GetOrderByID(ctx context.Context, in *GetOrderByIDRequest, opts ...grpc.CallOption) (*GetOrderByIDResponse, error)
	GetBundleResultV2(ctx context.Context, in *GetBundleResultRequest, opts ...grpc.CallOption) (*GetBundleResultResponse, error)
	GetUnsettled(ctx context.Context, in *GetUnsettledRequest, opts ...grpc.CallOption) (*GetUnsettledResponse, error)
	PostRouteTradeSwap(ctx context.Context, in *RouteTradeSwapRequest, opts ...grpc.CallOption) (*TradeSwapResponse, error)
	// streaming endpoints
	GetOrderbooksStream(ctx context.Context, in *GetOrderbooksRequest, opts ...grpc.CallOption) (Api_GetOrderbooksStreamClient, error)
	GetMarketDepthsStream(ctx context.Context, in *GetMarketDepthsRequest, opts ...grpc.CallOption) (Api_GetMarketDepthsStreamClient, error)
	GetTickersStream(ctx context.Context, in *GetTickersStreamRequest, opts ...grpc.CallOption) (Api_GetTickersStreamClient, error)
	GetTradesStream(ctx context.Context, in *GetTradesRequest, opts ...grpc.CallOption) (Api_GetTradesStreamClient, error)
	GetOrderStatusStream(ctx context.Context, in *GetOrderStatusStreamRequest, opts ...grpc.CallOption) (Api_GetOrderStatusStreamClient, error)
	GetRecentBlockHashStream(ctx context.Context, in *GetRecentBlockHashRequest, opts ...grpc.CallOption) (Api_GetRecentBlockHashStreamClient, error)
	GetBlockStream(ctx context.Context, in *GetBlockStreamRequest, opts ...grpc.CallOption) (Api_GetBlockStreamClient, error)
	GetPriorityFeeStream(ctx context.Context, in *GetPriorityFeeRequest, opts ...grpc.CallOption) (Api_GetPriorityFeeStreamClient, error)
	GetBundleTipStream(ctx context.Context, in *GetBundleTipRequest, opts ...grpc.CallOption) (Api_GetBundleTipStreamClient, error)
	GetQuotesStream(ctx context.Context, in *GetQuotesStreamRequest, opts ...grpc.CallOption) (Api_GetQuotesStreamClient, error)
	GetPoolReservesStream(ctx context.Context, in *GetPoolReservesStreamRequest, opts ...grpc.CallOption) (Api_GetPoolReservesStreamClient, error)
	GetPricesStream(ctx context.Context, in *GetPricesStreamRequest, opts ...grpc.CallOption) (Api_GetPricesStreamClient, error)
	GetNewRaydiumPoolsStream(ctx context.Context, in *GetNewRaydiumPoolsRequest, opts ...grpc.CallOption) (Api_GetNewRaydiumPoolsStreamClient, error)
	GetSwapsStream(ctx context.Context, in *GetSwapsStreamRequest, opts ...grpc.CallOption) (Api_GetSwapsStreamClient, error)
}

type apiClient struct {
	cc grpc.ClientConnInterface
}

func NewApiClient(cc grpc.ClientConnInterface) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) GetRateLimit(ctx context.Context, in *GetRateLimitRequest, opts ...grpc.CallOption) (*GetRateLimitResponse, error) {
	out := new(GetRateLimitResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetRateLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error) {
	out := new(GetTransactionResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostSubmitV2(ctx context.Context, in *PostSubmitRequest, opts ...grpc.CallOption) (*PostSubmitResponse, error) {
	out := new(PostSubmitResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostSubmitV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostSubmitBatchV2(ctx context.Context, in *PostSubmitBatchRequest, opts ...grpc.CallOption) (*PostSubmitBatchResponse, error) {
	out := new(PostSubmitBatchResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostSubmitBatchV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetRaydiumPools(ctx context.Context, in *GetRaydiumPoolsRequest, opts ...grpc.CallOption) (*GetRaydiumPoolsResponse, error) {
	out := new(GetRaydiumPoolsResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetRaydiumPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetRaydiumPoolReserve(ctx context.Context, in *GetRaydiumPoolReserveRequest, opts ...grpc.CallOption) (*GetRaydiumPoolReserveResponse, error) {
	out := new(GetRaydiumPoolReserveResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetRaydiumPoolReserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetRaydiumQuotes(ctx context.Context, in *GetRaydiumQuotesRequest, opts ...grpc.CallOption) (*GetRaydiumQuotesResponse, error) {
	out := new(GetRaydiumQuotesResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetRaydiumQuotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetRaydiumPrices(ctx context.Context, in *GetRaydiumPricesRequest, opts ...grpc.CallOption) (*GetRaydiumPricesResponse, error) {
	out := new(GetRaydiumPricesResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetRaydiumPrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostRaydiumSwap(ctx context.Context, in *PostRaydiumSwapRequest, opts ...grpc.CallOption) (*PostRaydiumSwapResponse, error) {
	out := new(PostRaydiumSwapResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostRaydiumSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostRaydiumRouteSwap(ctx context.Context, in *PostRaydiumRouteSwapRequest, opts ...grpc.CallOption) (*PostRaydiumRouteSwapResponse, error) {
	out := new(PostRaydiumRouteSwapResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostRaydiumRouteSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetJupiterQuotes(ctx context.Context, in *GetJupiterQuotesRequest, opts ...grpc.CallOption) (*GetJupiterQuotesResponse, error) {
	out := new(GetJupiterQuotesResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetJupiterQuotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetJupiterPrices(ctx context.Context, in *GetJupiterPricesRequest, opts ...grpc.CallOption) (*GetJupiterPricesResponse, error) {
	out := new(GetJupiterPricesResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetJupiterPrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostJupiterSwap(ctx context.Context, in *PostJupiterSwapRequest, opts ...grpc.CallOption) (*PostJupiterSwapResponse, error) {
	out := new(PostJupiterSwapResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostJupiterSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostJupiterSwapInstructions(ctx context.Context, in *PostJupiterSwapInstructionsRequest, opts ...grpc.CallOption) (*PostJupiterSwapInstructionsResponse, error) {
	out := new(PostJupiterSwapInstructionsResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostJupiterSwapInstructions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostJupiterRouteSwap(ctx context.Context, in *PostJupiterRouteSwapRequest, opts ...grpc.CallOption) (*PostJupiterRouteSwapResponse, error) {
	out := new(PostJupiterRouteSwapResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostJupiterRouteSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetMarketsV2(ctx context.Context, in *GetMarketsRequestV2, opts ...grpc.CallOption) (*GetMarketsResponseV2, error) {
	out := new(GetMarketsResponseV2)
	err := c.cc.Invoke(ctx, "/api.Api/GetMarketsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetTickersV2(ctx context.Context, in *GetTickersRequestV2, opts ...grpc.CallOption) (*GetTickersResponseV2, error) {
	out := new(GetTickersResponseV2)
	err := c.cc.Invoke(ctx, "/api.Api/GetTickersV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetOrderbookV2(ctx context.Context, in *GetOrderbookRequestV2, opts ...grpc.CallOption) (*GetOrderbookResponseV2, error) {
	out := new(GetOrderbookResponseV2)
	err := c.cc.Invoke(ctx, "/api.Api/GetOrderbookV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetMarketDepthV2(ctx context.Context, in *GetMarketDepthRequestV2, opts ...grpc.CallOption) (*GetMarketDepthResponseV2, error) {
	out := new(GetMarketDepthResponseV2)
	err := c.cc.Invoke(ctx, "/api.Api/GetMarketDepthV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostOrderV2(ctx context.Context, in *PostOrderRequestV2, opts ...grpc.CallOption) (*PostOrderResponse, error) {
	out := new(PostOrderResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostOrderV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostCancelOrderV2(ctx context.Context, in *PostCancelOrderRequestV2, opts ...grpc.CallOption) (*PostCancelOrderResponseV2, error) {
	out := new(PostCancelOrderResponseV2)
	err := c.cc.Invoke(ctx, "/api.Api/PostCancelOrderV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostReplaceOrderV2(ctx context.Context, in *PostReplaceOrderRequestV2, opts ...grpc.CallOption) (*PostOrderResponse, error) {
	out := new(PostOrderResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostReplaceOrderV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostSettleV2(ctx context.Context, in *PostSettleRequestV2, opts ...grpc.CallOption) (*PostSettleResponse, error) {
	out := new(PostSettleResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostSettleV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetOpenOrdersV2(ctx context.Context, in *GetOpenOrdersRequestV2, opts ...grpc.CallOption) (*GetOpenOrdersResponseV2, error) {
	out := new(GetOpenOrdersResponseV2)
	err := c.cc.Invoke(ctx, "/api.Api/GetOpenOrdersV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetUnsettledV2(ctx context.Context, in *GetUnsettledRequestV2, opts ...grpc.CallOption) (*GetUnsettledResponse, error) {
	out := new(GetUnsettledResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetUnsettledV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*GetPriceResponse, error) {
	out := new(GetPriceResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetMarkets(ctx context.Context, in *GetMarketsRequest, opts ...grpc.CallOption) (*GetMarketsResponse, error) {
	out := new(GetMarketsResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetMarkets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetPools(ctx context.Context, in *GetPoolsRequest, opts ...grpc.CallOption) (*GetPoolsResponse, error) {
	out := new(GetPoolsResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetTickers(ctx context.Context, in *GetTickersRequest, opts ...grpc.CallOption) (*GetTickersResponse, error) {
	out := new(GetTickersResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetTickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetKline(ctx context.Context, in *GetKlineRequest, opts ...grpc.CallOption) (*GetKlineResponse, error) {
	out := new(GetKlineResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetKline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetOrderbook(ctx context.Context, in *GetOrderbookRequest, opts ...grpc.CallOption) (*GetOrderbookResponse, error) {
	out := new(GetOrderbookResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetOrderbook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetMarketDepth(ctx context.Context, in *GetMarketDepthRequest, opts ...grpc.CallOption) (*GetMarketDepthResponse, error) {
	out := new(GetMarketDepthResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetMarketDepth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetTrades(ctx context.Context, in *GetTradesRequest, opts ...grpc.CallOption) (*GetTradesResponse, error) {
	out := new(GetTradesResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetTrades", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetQuotes(ctx context.Context, in *GetQuotesRequest, opts ...grpc.CallOption) (*GetQuotesResponse, error) {
	out := new(GetQuotesResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetQuotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetServerTime(ctx context.Context, in *GetServerTimeRequest, opts ...grpc.CallOption) (*GetServerTimeResponse, error) {
	out := new(GetServerTimeResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetServerTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetRecentBlockHash(ctx context.Context, in *GetRecentBlockHashRequest, opts ...grpc.CallOption) (*GetRecentBlockHashResponse, error) {
	out := new(GetRecentBlockHashResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetRecentBlockHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetPriorityFee(ctx context.Context, in *GetPriorityFeeRequest, opts ...grpc.CallOption) (*GetPriorityFeeResponse, error) {
	out := new(GetPriorityFeeResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetPriorityFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetAccountBalance(ctx context.Context, in *GetAccountBalanceRequest, opts ...grpc.CallOption) (*GetAccountBalanceResponse, error) {
	out := new(GetAccountBalanceResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetAccountBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetTokenAccounts(ctx context.Context, in *GetTokenAccountsRequest, opts ...grpc.CallOption) (*GetTokenAccountsResponse, error) {
	out := new(GetTokenAccountsResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetTokenAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetAccountBalanceV2(ctx context.Context, in *GetAccountBalanceRequest, opts ...grpc.CallOption) (*GetAccountBalanceResponse, error) {
	out := new(GetAccountBalanceResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetAccountBalanceV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostOrder(ctx context.Context, in *PostOrderRequest, opts ...grpc.CallOption) (*PostOrderResponse, error) {
	out := new(PostOrderResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostSubmit(ctx context.Context, in *PostSubmitRequest, opts ...grpc.CallOption) (*PostSubmitResponse, error) {
	out := new(PostSubmitResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostSubmit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostSubmitBatch(ctx context.Context, in *PostSubmitBatchRequest, opts ...grpc.CallOption) (*PostSubmitBatchResponse, error) {
	out := new(PostSubmitBatchResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostSubmitBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostCancelOrder(ctx context.Context, in *PostCancelOrderRequest, opts ...grpc.CallOption) (*PostCancelOrderResponse, error) {
	out := new(PostCancelOrderResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostCancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostCancelByClientOrderID(ctx context.Context, in *PostCancelByClientOrderIDRequest, opts ...grpc.CallOption) (*PostCancelOrderResponse, error) {
	out := new(PostCancelOrderResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostCancelByClientOrderID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostCancelAll(ctx context.Context, in *PostCancelAllRequest, opts ...grpc.CallOption) (*PostCancelAllResponse, error) {
	out := new(PostCancelAllResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostCancelAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostReplaceByClientOrderID(ctx context.Context, in *PostOrderRequest, opts ...grpc.CallOption) (*PostOrderResponse, error) {
	out := new(PostOrderResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostReplaceByClientOrderID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostReplaceOrder(ctx context.Context, in *PostReplaceOrderRequest, opts ...grpc.CallOption) (*PostOrderResponse, error) {
	out := new(PostOrderResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostReplaceOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostSettle(ctx context.Context, in *PostSettleRequest, opts ...grpc.CallOption) (*PostSettleResponse, error) {
	out := new(PostSettleResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostSettle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostTradeSwap(ctx context.Context, in *TradeSwapRequest, opts ...grpc.CallOption) (*TradeSwapResponse, error) {
	out := new(TradeSwapResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostTradeSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error) {
	out := new(GetOrdersResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetOpenOrders(ctx context.Context, in *GetOpenOrdersRequest, opts ...grpc.CallOption) (*GetOpenOrdersResponse, error) {
	out := new(GetOpenOrdersResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetOpenOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetOrderByID(ctx context.Context, in *GetOrderByIDRequest, opts ...grpc.CallOption) (*GetOrderByIDResponse, error) {
	out := new(GetOrderByIDResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetOrderByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetBundleResultV2(ctx context.Context, in *GetBundleResultRequest, opts ...grpc.CallOption) (*GetBundleResultResponse, error) {
	out := new(GetBundleResultResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetBundleResultV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetUnsettled(ctx context.Context, in *GetUnsettledRequest, opts ...grpc.CallOption) (*GetUnsettledResponse, error) {
	out := new(GetUnsettledResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetUnsettled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostRouteTradeSwap(ctx context.Context, in *RouteTradeSwapRequest, opts ...grpc.CallOption) (*TradeSwapResponse, error) {
	out := new(TradeSwapResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostRouteTradeSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetOrderbooksStream(ctx context.Context, in *GetOrderbooksRequest, opts ...grpc.CallOption) (Api_GetOrderbooksStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Api_ServiceDesc.Streams[0], "/api.Api/GetOrderbooksStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiGetOrderbooksStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_GetOrderbooksStreamClient interface {
	Recv() (*GetOrderbooksStreamResponse, error)
	grpc.ClientStream
}

type apiGetOrderbooksStreamClient struct {
	grpc.ClientStream
}

func (x *apiGetOrderbooksStreamClient) Recv() (*GetOrderbooksStreamResponse, error) {
	m := new(GetOrderbooksStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) GetMarketDepthsStream(ctx context.Context, in *GetMarketDepthsRequest, opts ...grpc.CallOption) (Api_GetMarketDepthsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Api_ServiceDesc.Streams[1], "/api.Api/GetMarketDepthsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiGetMarketDepthsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_GetMarketDepthsStreamClient interface {
	Recv() (*GetMarketDepthsStreamResponse, error)
	grpc.ClientStream
}

type apiGetMarketDepthsStreamClient struct {
	grpc.ClientStream
}

func (x *apiGetMarketDepthsStreamClient) Recv() (*GetMarketDepthsStreamResponse, error) {
	m := new(GetMarketDepthsStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) GetTickersStream(ctx context.Context, in *GetTickersStreamRequest, opts ...grpc.CallOption) (Api_GetTickersStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Api_ServiceDesc.Streams[2], "/api.Api/GetTickersStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiGetTickersStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_GetTickersStreamClient interface {
	Recv() (*GetTickersStreamResponse, error)
	grpc.ClientStream
}

type apiGetTickersStreamClient struct {
	grpc.ClientStream
}

func (x *apiGetTickersStreamClient) Recv() (*GetTickersStreamResponse, error) {
	m := new(GetTickersStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) GetTradesStream(ctx context.Context, in *GetTradesRequest, opts ...grpc.CallOption) (Api_GetTradesStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Api_ServiceDesc.Streams[3], "/api.Api/GetTradesStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiGetTradesStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_GetTradesStreamClient interface {
	Recv() (*GetTradesStreamResponse, error)
	grpc.ClientStream
}

type apiGetTradesStreamClient struct {
	grpc.ClientStream
}

func (x *apiGetTradesStreamClient) Recv() (*GetTradesStreamResponse, error) {
	m := new(GetTradesStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) GetOrderStatusStream(ctx context.Context, in *GetOrderStatusStreamRequest, opts ...grpc.CallOption) (Api_GetOrderStatusStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Api_ServiceDesc.Streams[4], "/api.Api/GetOrderStatusStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiGetOrderStatusStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_GetOrderStatusStreamClient interface {
	Recv() (*GetOrderStatusStreamResponse, error)
	grpc.ClientStream
}

type apiGetOrderStatusStreamClient struct {
	grpc.ClientStream
}

func (x *apiGetOrderStatusStreamClient) Recv() (*GetOrderStatusStreamResponse, error) {
	m := new(GetOrderStatusStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) GetRecentBlockHashStream(ctx context.Context, in *GetRecentBlockHashRequest, opts ...grpc.CallOption) (Api_GetRecentBlockHashStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Api_ServiceDesc.Streams[5], "/api.Api/GetRecentBlockHashStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiGetRecentBlockHashStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_GetRecentBlockHashStreamClient interface {
	Recv() (*GetRecentBlockHashResponse, error)
	grpc.ClientStream
}

type apiGetRecentBlockHashStreamClient struct {
	grpc.ClientStream
}

func (x *apiGetRecentBlockHashStreamClient) Recv() (*GetRecentBlockHashResponse, error) {
	m := new(GetRecentBlockHashResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) GetBlockStream(ctx context.Context, in *GetBlockStreamRequest, opts ...grpc.CallOption) (Api_GetBlockStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Api_ServiceDesc.Streams[6], "/api.Api/GetBlockStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiGetBlockStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_GetBlockStreamClient interface {
	Recv() (*GetBlockStreamResponse, error)
	grpc.ClientStream
}

type apiGetBlockStreamClient struct {
	grpc.ClientStream
}

func (x *apiGetBlockStreamClient) Recv() (*GetBlockStreamResponse, error) {
	m := new(GetBlockStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) GetPriorityFeeStream(ctx context.Context, in *GetPriorityFeeRequest, opts ...grpc.CallOption) (Api_GetPriorityFeeStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Api_ServiceDesc.Streams[7], "/api.Api/GetPriorityFeeStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiGetPriorityFeeStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_GetPriorityFeeStreamClient interface {
	Recv() (*GetPriorityFeeResponse, error)
	grpc.ClientStream
}

type apiGetPriorityFeeStreamClient struct {
	grpc.ClientStream
}

func (x *apiGetPriorityFeeStreamClient) Recv() (*GetPriorityFeeResponse, error) {
	m := new(GetPriorityFeeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) GetBundleTipStream(ctx context.Context, in *GetBundleTipRequest, opts ...grpc.CallOption) (Api_GetBundleTipStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Api_ServiceDesc.Streams[8], "/api.Api/GetBundleTipStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiGetBundleTipStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_GetBundleTipStreamClient interface {
	Recv() (*GetBundleTipResponse, error)
	grpc.ClientStream
}

type apiGetBundleTipStreamClient struct {
	grpc.ClientStream
}

func (x *apiGetBundleTipStreamClient) Recv() (*GetBundleTipResponse, error) {
	m := new(GetBundleTipResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) GetQuotesStream(ctx context.Context, in *GetQuotesStreamRequest, opts ...grpc.CallOption) (Api_GetQuotesStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Api_ServiceDesc.Streams[9], "/api.Api/GetQuotesStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiGetQuotesStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_GetQuotesStreamClient interface {
	Recv() (*GetQuotesStreamResponse, error)
	grpc.ClientStream
}

type apiGetQuotesStreamClient struct {
	grpc.ClientStream
}

func (x *apiGetQuotesStreamClient) Recv() (*GetQuotesStreamResponse, error) {
	m := new(GetQuotesStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) GetPoolReservesStream(ctx context.Context, in *GetPoolReservesStreamRequest, opts ...grpc.CallOption) (Api_GetPoolReservesStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Api_ServiceDesc.Streams[10], "/api.Api/GetPoolReservesStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiGetPoolReservesStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_GetPoolReservesStreamClient interface {
	Recv() (*GetPoolReservesStreamResponse, error)
	grpc.ClientStream
}

type apiGetPoolReservesStreamClient struct {
	grpc.ClientStream
}

func (x *apiGetPoolReservesStreamClient) Recv() (*GetPoolReservesStreamResponse, error) {
	m := new(GetPoolReservesStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) GetPricesStream(ctx context.Context, in *GetPricesStreamRequest, opts ...grpc.CallOption) (Api_GetPricesStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Api_ServiceDesc.Streams[11], "/api.Api/GetPricesStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiGetPricesStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_GetPricesStreamClient interface {
	Recv() (*GetPricesStreamResponse, error)
	grpc.ClientStream
}

type apiGetPricesStreamClient struct {
	grpc.ClientStream
}

func (x *apiGetPricesStreamClient) Recv() (*GetPricesStreamResponse, error) {
	m := new(GetPricesStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) GetNewRaydiumPoolsStream(ctx context.Context, in *GetNewRaydiumPoolsRequest, opts ...grpc.CallOption) (Api_GetNewRaydiumPoolsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Api_ServiceDesc.Streams[12], "/api.Api/GetNewRaydiumPoolsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiGetNewRaydiumPoolsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_GetNewRaydiumPoolsStreamClient interface {
	Recv() (*GetNewRaydiumPoolsResponse, error)
	grpc.ClientStream
}

type apiGetNewRaydiumPoolsStreamClient struct {
	grpc.ClientStream
}

func (x *apiGetNewRaydiumPoolsStreamClient) Recv() (*GetNewRaydiumPoolsResponse, error) {
	m := new(GetNewRaydiumPoolsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) GetSwapsStream(ctx context.Context, in *GetSwapsStreamRequest, opts ...grpc.CallOption) (Api_GetSwapsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Api_ServiceDesc.Streams[13], "/api.Api/GetSwapsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiGetSwapsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_GetSwapsStreamClient interface {
	Recv() (*GetSwapsStreamResponse, error)
	grpc.ClientStream
}

type apiGetSwapsStreamClient struct {
	grpc.ClientStream
}

func (x *apiGetSwapsStreamClient) Recv() (*GetSwapsStreamResponse, error) {
	m := new(GetSwapsStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApiServer is the server API for Api service.
// All implementations must embed UnimplementedApiServer
// for forward compatibility
type ApiServer interface {
	GetRateLimit(context.Context, *GetRateLimitRequest) (*GetRateLimitResponse, error)
	GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error)
	PostSubmitV2(context.Context, *PostSubmitRequest) (*PostSubmitResponse, error)
	PostSubmitBatchV2(context.Context, *PostSubmitBatchRequest) (*PostSubmitBatchResponse, error)
	// Raydium V2
	GetRaydiumPools(context.Context, *GetRaydiumPoolsRequest) (*GetRaydiumPoolsResponse, error)
	GetRaydiumPoolReserve(context.Context, *GetRaydiumPoolReserveRequest) (*GetRaydiumPoolReserveResponse, error)
	GetRaydiumQuotes(context.Context, *GetRaydiumQuotesRequest) (*GetRaydiumQuotesResponse, error)
	GetRaydiumPrices(context.Context, *GetRaydiumPricesRequest) (*GetRaydiumPricesResponse, error)
	PostRaydiumSwap(context.Context, *PostRaydiumSwapRequest) (*PostRaydiumSwapResponse, error)
	PostRaydiumRouteSwap(context.Context, *PostRaydiumRouteSwapRequest) (*PostRaydiumRouteSwapResponse, error)
	// Jupiter V2
	GetJupiterQuotes(context.Context, *GetJupiterQuotesRequest) (*GetJupiterQuotesResponse, error)
	GetJupiterPrices(context.Context, *GetJupiterPricesRequest) (*GetJupiterPricesResponse, error)
	PostJupiterSwap(context.Context, *PostJupiterSwapRequest) (*PostJupiterSwapResponse, error)
	PostJupiterSwapInstructions(context.Context, *PostJupiterSwapInstructionsRequest) (*PostJupiterSwapInstructionsResponse, error)
	PostJupiterRouteSwap(context.Context, *PostJupiterRouteSwapRequest) (*PostJupiterRouteSwapResponse, error)
	GetMarketsV2(context.Context, *GetMarketsRequestV2) (*GetMarketsResponseV2, error)
	GetTickersV2(context.Context, *GetTickersRequestV2) (*GetTickersResponseV2, error)
	GetOrderbookV2(context.Context, *GetOrderbookRequestV2) (*GetOrderbookResponseV2, error)
	GetMarketDepthV2(context.Context, *GetMarketDepthRequestV2) (*GetMarketDepthResponseV2, error)
	PostOrderV2(context.Context, *PostOrderRequestV2) (*PostOrderResponse, error)
	PostCancelOrderV2(context.Context, *PostCancelOrderRequestV2) (*PostCancelOrderResponseV2, error)
	PostReplaceOrderV2(context.Context, *PostReplaceOrderRequestV2) (*PostOrderResponse, error)
	PostSettleV2(context.Context, *PostSettleRequestV2) (*PostSettleResponse, error)
	GetOpenOrdersV2(context.Context, *GetOpenOrdersRequestV2) (*GetOpenOrdersResponseV2, error)
	GetUnsettledV2(context.Context, *GetUnsettledRequestV2) (*GetUnsettledResponse, error)
	GetPrice(context.Context, *GetPriceRequest) (*GetPriceResponse, error)
	GetMarkets(context.Context, *GetMarketsRequest) (*GetMarketsResponse, error)
	GetPools(context.Context, *GetPoolsRequest) (*GetPoolsResponse, error)
	GetTickers(context.Context, *GetTickersRequest) (*GetTickersResponse, error)
	GetKline(context.Context, *GetKlineRequest) (*GetKlineResponse, error)
	GetOrderbook(context.Context, *GetOrderbookRequest) (*GetOrderbookResponse, error)
	GetMarketDepth(context.Context, *GetMarketDepthRequest) (*GetMarketDepthResponse, error)
	GetTrades(context.Context, *GetTradesRequest) (*GetTradesResponse, error)
	GetQuotes(context.Context, *GetQuotesRequest) (*GetQuotesResponse, error)
	// system API
	GetServerTime(context.Context, *GetServerTimeRequest) (*GetServerTimeResponse, error)
	GetRecentBlockHash(context.Context, *GetRecentBlockHashRequest) (*GetRecentBlockHashResponse, error)
	GetPriorityFee(context.Context, *GetPriorityFeeRequest) (*GetPriorityFeeResponse, error)
	// account endpoints
	GetAccountBalance(context.Context, *GetAccountBalanceRequest) (*GetAccountBalanceResponse, error)
	GetTokenAccounts(context.Context, *GetTokenAccountsRequest) (*GetTokenAccountsResponse, error)
	GetAccountBalanceV2(context.Context, *GetAccountBalanceRequest) (*GetAccountBalanceResponse, error)
	// trade endpoints
	PostOrder(context.Context, *PostOrderRequest) (*PostOrderResponse, error)
	PostSubmit(context.Context, *PostSubmitRequest) (*PostSubmitResponse, error)
	PostSubmitBatch(context.Context, *PostSubmitBatchRequest) (*PostSubmitBatchResponse, error)
	PostCancelOrder(context.Context, *PostCancelOrderRequest) (*PostCancelOrderResponse, error)
	PostCancelByClientOrderID(context.Context, *PostCancelByClientOrderIDRequest) (*PostCancelOrderResponse, error)
	PostCancelAll(context.Context, *PostCancelAllRequest) (*PostCancelAllResponse, error)
	PostReplaceByClientOrderID(context.Context, *PostOrderRequest) (*PostOrderResponse, error)
	PostReplaceOrder(context.Context, *PostReplaceOrderRequest) (*PostOrderResponse, error)
	PostSettle(context.Context, *PostSettleRequest) (*PostSettleResponse, error)
	PostTradeSwap(context.Context, *TradeSwapRequest) (*TradeSwapResponse, error)
	GetOrders(context.Context, *GetOrdersRequest) (*GetOrdersResponse, error)
	GetOpenOrders(context.Context, *GetOpenOrdersRequest) (*GetOpenOrdersResponse, error)
	GetOrderByID(context.Context, *GetOrderByIDRequest) (*GetOrderByIDResponse, error)
	GetBundleResultV2(context.Context, *GetBundleResultRequest) (*GetBundleResultResponse, error)
	GetUnsettled(context.Context, *GetUnsettledRequest) (*GetUnsettledResponse, error)
	PostRouteTradeSwap(context.Context, *RouteTradeSwapRequest) (*TradeSwapResponse, error)
	// streaming endpoints
	GetOrderbooksStream(*GetOrderbooksRequest, Api_GetOrderbooksStreamServer) error
	GetMarketDepthsStream(*GetMarketDepthsRequest, Api_GetMarketDepthsStreamServer) error
	GetTickersStream(*GetTickersStreamRequest, Api_GetTickersStreamServer) error
	GetTradesStream(*GetTradesRequest, Api_GetTradesStreamServer) error
	GetOrderStatusStream(*GetOrderStatusStreamRequest, Api_GetOrderStatusStreamServer) error
	GetRecentBlockHashStream(*GetRecentBlockHashRequest, Api_GetRecentBlockHashStreamServer) error
	GetBlockStream(*GetBlockStreamRequest, Api_GetBlockStreamServer) error
	GetPriorityFeeStream(*GetPriorityFeeRequest, Api_GetPriorityFeeStreamServer) error
	GetBundleTipStream(*GetBundleTipRequest, Api_GetBundleTipStreamServer) error
	GetQuotesStream(*GetQuotesStreamRequest, Api_GetQuotesStreamServer) error
	GetPoolReservesStream(*GetPoolReservesStreamRequest, Api_GetPoolReservesStreamServer) error
	GetPricesStream(*GetPricesStreamRequest, Api_GetPricesStreamServer) error
	GetNewRaydiumPoolsStream(*GetNewRaydiumPoolsRequest, Api_GetNewRaydiumPoolsStreamServer) error
	GetSwapsStream(*GetSwapsStreamRequest, Api_GetSwapsStreamServer) error
	mustEmbedUnimplementedApiServer()
}

// UnimplementedApiServer must be embedded to have forward compatible implementations.
type UnimplementedApiServer struct {
}

func (UnimplementedApiServer) GetRateLimit(context.Context, *GetRateLimitRequest) (*GetRateLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRateLimit not implemented")
}
func (UnimplementedApiServer) GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedApiServer) PostSubmitV2(context.Context, *PostSubmitRequest) (*PostSubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSubmitV2 not implemented")
}
func (UnimplementedApiServer) PostSubmitBatchV2(context.Context, *PostSubmitBatchRequest) (*PostSubmitBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSubmitBatchV2 not implemented")
}
func (UnimplementedApiServer) GetRaydiumPools(context.Context, *GetRaydiumPoolsRequest) (*GetRaydiumPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRaydiumPools not implemented")
}
func (UnimplementedApiServer) GetRaydiumPoolReserve(context.Context, *GetRaydiumPoolReserveRequest) (*GetRaydiumPoolReserveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRaydiumPoolReserve not implemented")
}
func (UnimplementedApiServer) GetRaydiumQuotes(context.Context, *GetRaydiumQuotesRequest) (*GetRaydiumQuotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRaydiumQuotes not implemented")
}
func (UnimplementedApiServer) GetRaydiumPrices(context.Context, *GetRaydiumPricesRequest) (*GetRaydiumPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRaydiumPrices not implemented")
}
func (UnimplementedApiServer) PostRaydiumSwap(context.Context, *PostRaydiumSwapRequest) (*PostRaydiumSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostRaydiumSwap not implemented")
}
func (UnimplementedApiServer) PostRaydiumRouteSwap(context.Context, *PostRaydiumRouteSwapRequest) (*PostRaydiumRouteSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostRaydiumRouteSwap not implemented")
}
func (UnimplementedApiServer) GetJupiterQuotes(context.Context, *GetJupiterQuotesRequest) (*GetJupiterQuotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJupiterQuotes not implemented")
}
func (UnimplementedApiServer) GetJupiterPrices(context.Context, *GetJupiterPricesRequest) (*GetJupiterPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJupiterPrices not implemented")
}
func (UnimplementedApiServer) PostJupiterSwap(context.Context, *PostJupiterSwapRequest) (*PostJupiterSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostJupiterSwap not implemented")
}
func (UnimplementedApiServer) PostJupiterSwapInstructions(context.Context, *PostJupiterSwapInstructionsRequest) (*PostJupiterSwapInstructionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostJupiterSwapInstructions not implemented")
}
func (UnimplementedApiServer) PostJupiterRouteSwap(context.Context, *PostJupiterRouteSwapRequest) (*PostJupiterRouteSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostJupiterRouteSwap not implemented")
}
func (UnimplementedApiServer) GetMarketsV2(context.Context, *GetMarketsRequestV2) (*GetMarketsResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketsV2 not implemented")
}
func (UnimplementedApiServer) GetTickersV2(context.Context, *GetTickersRequestV2) (*GetTickersResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTickersV2 not implemented")
}
func (UnimplementedApiServer) GetOrderbookV2(context.Context, *GetOrderbookRequestV2) (*GetOrderbookResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderbookV2 not implemented")
}
func (UnimplementedApiServer) GetMarketDepthV2(context.Context, *GetMarketDepthRequestV2) (*GetMarketDepthResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketDepthV2 not implemented")
}
func (UnimplementedApiServer) PostOrderV2(context.Context, *PostOrderRequestV2) (*PostOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostOrderV2 not implemented")
}
func (UnimplementedApiServer) PostCancelOrderV2(context.Context, *PostCancelOrderRequestV2) (*PostCancelOrderResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCancelOrderV2 not implemented")
}
func (UnimplementedApiServer) PostReplaceOrderV2(context.Context, *PostReplaceOrderRequestV2) (*PostOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostReplaceOrderV2 not implemented")
}
func (UnimplementedApiServer) PostSettleV2(context.Context, *PostSettleRequestV2) (*PostSettleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSettleV2 not implemented")
}
func (UnimplementedApiServer) GetOpenOrdersV2(context.Context, *GetOpenOrdersRequestV2) (*GetOpenOrdersResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenOrdersV2 not implemented")
}
func (UnimplementedApiServer) GetUnsettledV2(context.Context, *GetUnsettledRequestV2) (*GetUnsettledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnsettledV2 not implemented")
}
func (UnimplementedApiServer) GetPrice(context.Context, *GetPriceRequest) (*GetPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrice not implemented")
}
func (UnimplementedApiServer) GetMarkets(context.Context, *GetMarketsRequest) (*GetMarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarkets not implemented")
}
func (UnimplementedApiServer) GetPools(context.Context, *GetPoolsRequest) (*GetPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPools not implemented")
}
func (UnimplementedApiServer) GetTickers(context.Context, *GetTickersRequest) (*GetTickersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTickers not implemented")
}
func (UnimplementedApiServer) GetKline(context.Context, *GetKlineRequest) (*GetKlineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKline not implemented")
}
func (UnimplementedApiServer) GetOrderbook(context.Context, *GetOrderbookRequest) (*GetOrderbookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderbook not implemented")
}
func (UnimplementedApiServer) GetMarketDepth(context.Context, *GetMarketDepthRequest) (*GetMarketDepthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketDepth not implemented")
}
func (UnimplementedApiServer) GetTrades(context.Context, *GetTradesRequest) (*GetTradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrades not implemented")
}
func (UnimplementedApiServer) GetQuotes(context.Context, *GetQuotesRequest) (*GetQuotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuotes not implemented")
}
func (UnimplementedApiServer) GetServerTime(context.Context, *GetServerTimeRequest) (*GetServerTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerTime not implemented")
}
func (UnimplementedApiServer) GetRecentBlockHash(context.Context, *GetRecentBlockHashRequest) (*GetRecentBlockHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentBlockHash not implemented")
}
func (UnimplementedApiServer) GetPriorityFee(context.Context, *GetPriorityFeeRequest) (*GetPriorityFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPriorityFee not implemented")
}
func (UnimplementedApiServer) GetAccountBalance(context.Context, *GetAccountBalanceRequest) (*GetAccountBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountBalance not implemented")
}
func (UnimplementedApiServer) GetTokenAccounts(context.Context, *GetTokenAccountsRequest) (*GetTokenAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenAccounts not implemented")
}
func (UnimplementedApiServer) GetAccountBalanceV2(context.Context, *GetAccountBalanceRequest) (*GetAccountBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountBalanceV2 not implemented")
}
func (UnimplementedApiServer) PostOrder(context.Context, *PostOrderRequest) (*PostOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostOrder not implemented")
}
func (UnimplementedApiServer) PostSubmit(context.Context, *PostSubmitRequest) (*PostSubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSubmit not implemented")
}
func (UnimplementedApiServer) PostSubmitBatch(context.Context, *PostSubmitBatchRequest) (*PostSubmitBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSubmitBatch not implemented")
}
func (UnimplementedApiServer) PostCancelOrder(context.Context, *PostCancelOrderRequest) (*PostCancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCancelOrder not implemented")
}
func (UnimplementedApiServer) PostCancelByClientOrderID(context.Context, *PostCancelByClientOrderIDRequest) (*PostCancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCancelByClientOrderID not implemented")
}
func (UnimplementedApiServer) PostCancelAll(context.Context, *PostCancelAllRequest) (*PostCancelAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCancelAll not implemented")
}
func (UnimplementedApiServer) PostReplaceByClientOrderID(context.Context, *PostOrderRequest) (*PostOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostReplaceByClientOrderID not implemented")
}
func (UnimplementedApiServer) PostReplaceOrder(context.Context, *PostReplaceOrderRequest) (*PostOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostReplaceOrder not implemented")
}
func (UnimplementedApiServer) PostSettle(context.Context, *PostSettleRequest) (*PostSettleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSettle not implemented")
}
func (UnimplementedApiServer) PostTradeSwap(context.Context, *TradeSwapRequest) (*TradeSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTradeSwap not implemented")
}
func (UnimplementedApiServer) GetOrders(context.Context, *GetOrdersRequest) (*GetOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (UnimplementedApiServer) GetOpenOrders(context.Context, *GetOpenOrdersRequest) (*GetOpenOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenOrders not implemented")
}
func (UnimplementedApiServer) GetOrderByID(context.Context, *GetOrderByIDRequest) (*GetOrderByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderByID not implemented")
}
func (UnimplementedApiServer) GetBundleResultV2(context.Context, *GetBundleResultRequest) (*GetBundleResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBundleResultV2 not implemented")
}
func (UnimplementedApiServer) GetUnsettled(context.Context, *GetUnsettledRequest) (*GetUnsettledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnsettled not implemented")
}
func (UnimplementedApiServer) PostRouteTradeSwap(context.Context, *RouteTradeSwapRequest) (*TradeSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostRouteTradeSwap not implemented")
}
func (UnimplementedApiServer) GetOrderbooksStream(*GetOrderbooksRequest, Api_GetOrderbooksStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOrderbooksStream not implemented")
}
func (UnimplementedApiServer) GetMarketDepthsStream(*GetMarketDepthsRequest, Api_GetMarketDepthsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMarketDepthsStream not implemented")
}
func (UnimplementedApiServer) GetTickersStream(*GetTickersStreamRequest, Api_GetTickersStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTickersStream not implemented")
}
func (UnimplementedApiServer) GetTradesStream(*GetTradesRequest, Api_GetTradesStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTradesStream not implemented")
}
func (UnimplementedApiServer) GetOrderStatusStream(*GetOrderStatusStreamRequest, Api_GetOrderStatusStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOrderStatusStream not implemented")
}
func (UnimplementedApiServer) GetRecentBlockHashStream(*GetRecentBlockHashRequest, Api_GetRecentBlockHashStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRecentBlockHashStream not implemented")
}
func (UnimplementedApiServer) GetBlockStream(*GetBlockStreamRequest, Api_GetBlockStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBlockStream not implemented")
}
func (UnimplementedApiServer) GetPriorityFeeStream(*GetPriorityFeeRequest, Api_GetPriorityFeeStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPriorityFeeStream not implemented")
}
func (UnimplementedApiServer) GetBundleTipStream(*GetBundleTipRequest, Api_GetBundleTipStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBundleTipStream not implemented")
}
func (UnimplementedApiServer) GetQuotesStream(*GetQuotesStreamRequest, Api_GetQuotesStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetQuotesStream not implemented")
}
func (UnimplementedApiServer) GetPoolReservesStream(*GetPoolReservesStreamRequest, Api_GetPoolReservesStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPoolReservesStream not implemented")
}
func (UnimplementedApiServer) GetPricesStream(*GetPricesStreamRequest, Api_GetPricesStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPricesStream not implemented")
}
func (UnimplementedApiServer) GetNewRaydiumPoolsStream(*GetNewRaydiumPoolsRequest, Api_GetNewRaydiumPoolsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNewRaydiumPoolsStream not implemented")
}
func (UnimplementedApiServer) GetSwapsStream(*GetSwapsStreamRequest, Api_GetSwapsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSwapsStream not implemented")
}
func (UnimplementedApiServer) mustEmbedUnimplementedApiServer() {}

// UnsafeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServer will
// result in compilation errors.
type UnsafeApiServer interface {
	mustEmbedUnimplementedApiServer()
}

func RegisterApiServer(s grpc.ServiceRegistrar, srv ApiServer) {
	s.RegisterService(&Api_ServiceDesc, srv)
}

func _Api_GetRateLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRateLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetRateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetRateLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetRateLimit(ctx, req.(*GetRateLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostSubmitV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostSubmitV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostSubmitV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostSubmitV2(ctx, req.(*PostSubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostSubmitBatchV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSubmitBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostSubmitBatchV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostSubmitBatchV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostSubmitBatchV2(ctx, req.(*PostSubmitBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetRaydiumPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRaydiumPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetRaydiumPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetRaydiumPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetRaydiumPools(ctx, req.(*GetRaydiumPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetRaydiumPoolReserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRaydiumPoolReserveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetRaydiumPoolReserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetRaydiumPoolReserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetRaydiumPoolReserve(ctx, req.(*GetRaydiumPoolReserveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetRaydiumQuotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRaydiumQuotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetRaydiumQuotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetRaydiumQuotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetRaydiumQuotes(ctx, req.(*GetRaydiumQuotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetRaydiumPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRaydiumPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetRaydiumPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetRaydiumPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetRaydiumPrices(ctx, req.(*GetRaydiumPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostRaydiumSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRaydiumSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostRaydiumSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostRaydiumSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostRaydiumSwap(ctx, req.(*PostRaydiumSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostRaydiumRouteSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRaydiumRouteSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostRaydiumRouteSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostRaydiumRouteSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostRaydiumRouteSwap(ctx, req.(*PostRaydiumRouteSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetJupiterQuotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJupiterQuotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetJupiterQuotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetJupiterQuotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetJupiterQuotes(ctx, req.(*GetJupiterQuotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetJupiterPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJupiterPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetJupiterPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetJupiterPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetJupiterPrices(ctx, req.(*GetJupiterPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostJupiterSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostJupiterSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostJupiterSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostJupiterSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostJupiterSwap(ctx, req.(*PostJupiterSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostJupiterSwapInstructions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostJupiterSwapInstructionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostJupiterSwapInstructions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostJupiterSwapInstructions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostJupiterSwapInstructions(ctx, req.(*PostJupiterSwapInstructionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostJupiterRouteSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostJupiterRouteSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostJupiterRouteSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostJupiterRouteSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostJupiterRouteSwap(ctx, req.(*PostJupiterRouteSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetMarketsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketsRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetMarketsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetMarketsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetMarketsV2(ctx, req.(*GetMarketsRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetTickersV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTickersRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetTickersV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetTickersV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetTickersV2(ctx, req.(*GetTickersRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetOrderbookV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderbookRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetOrderbookV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetOrderbookV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetOrderbookV2(ctx, req.(*GetOrderbookRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetMarketDepthV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketDepthRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetMarketDepthV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetMarketDepthV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetMarketDepthV2(ctx, req.(*GetMarketDepthRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostOrderV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostOrderRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostOrderV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostOrderV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostOrderV2(ctx, req.(*PostOrderRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostCancelOrderV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCancelOrderRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostCancelOrderV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostCancelOrderV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostCancelOrderV2(ctx, req.(*PostCancelOrderRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostReplaceOrderV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostReplaceOrderRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostReplaceOrderV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostReplaceOrderV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostReplaceOrderV2(ctx, req.(*PostReplaceOrderRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostSettleV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSettleRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostSettleV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostSettleV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostSettleV2(ctx, req.(*PostSettleRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetOpenOrdersV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpenOrdersRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetOpenOrdersV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetOpenOrdersV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetOpenOrdersV2(ctx, req.(*GetOpenOrdersRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetUnsettledV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnsettledRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetUnsettledV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetUnsettledV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetUnsettledV2(ctx, req.(*GetUnsettledRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetPrice(ctx, req.(*GetPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetMarkets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetMarkets(ctx, req.(*GetMarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetPools(ctx, req.(*GetPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetTickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTickersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetTickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetTickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetTickers(ctx, req.(*GetTickersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetKline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetKline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetKline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetKline(ctx, req.(*GetKlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetOrderbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetOrderbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetOrderbook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetOrderbook(ctx, req.(*GetOrderbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetMarketDepth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketDepthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetMarketDepth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetMarketDepth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetMarketDepth(ctx, req.(*GetMarketDepthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetTrades",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetTrades(ctx, req.(*GetTradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetQuotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetQuotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetQuotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetQuotes(ctx, req.(*GetQuotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetServerTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetServerTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetServerTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetServerTime(ctx, req.(*GetServerTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetRecentBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecentBlockHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetRecentBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetRecentBlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetRecentBlockHash(ctx, req.(*GetRecentBlockHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetPriorityFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriorityFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetPriorityFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetPriorityFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetPriorityFee(ctx, req.(*GetPriorityFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetAccountBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetAccountBalance(ctx, req.(*GetAccountBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetTokenAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetTokenAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetTokenAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetTokenAccounts(ctx, req.(*GetTokenAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetAccountBalanceV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetAccountBalanceV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetAccountBalanceV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetAccountBalanceV2(ctx, req.(*GetAccountBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostOrder(ctx, req.(*PostOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostSubmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostSubmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostSubmit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostSubmit(ctx, req.(*PostSubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostSubmitBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSubmitBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostSubmitBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostSubmitBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostSubmitBatch(ctx, req.(*PostSubmitBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostCancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostCancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostCancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostCancelOrder(ctx, req.(*PostCancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostCancelByClientOrderID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCancelByClientOrderIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostCancelByClientOrderID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostCancelByClientOrderID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostCancelByClientOrderID(ctx, req.(*PostCancelByClientOrderIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostCancelAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCancelAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostCancelAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostCancelAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostCancelAll(ctx, req.(*PostCancelAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostReplaceByClientOrderID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostReplaceByClientOrderID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostReplaceByClientOrderID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostReplaceByClientOrderID(ctx, req.(*PostOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostReplaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostReplaceOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostReplaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostReplaceOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostReplaceOrder(ctx, req.(*PostReplaceOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostSettle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSettleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostSettle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostSettle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostSettle(ctx, req.(*PostSettleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostTradeSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostTradeSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostTradeSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostTradeSwap(ctx, req.(*TradeSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetOrders(ctx, req.(*GetOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetOpenOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpenOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetOpenOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetOpenOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetOpenOrders(ctx, req.(*GetOpenOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetOrderByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetOrderByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetOrderByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetOrderByID(ctx, req.(*GetOrderByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetBundleResultV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBundleResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetBundleResultV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetBundleResultV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetBundleResultV2(ctx, req.(*GetBundleResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetUnsettled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnsettledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetUnsettled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetUnsettled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetUnsettled(ctx, req.(*GetUnsettledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostRouteTradeSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteTradeSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostRouteTradeSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostRouteTradeSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostRouteTradeSwap(ctx, req.(*RouteTradeSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetOrderbooksStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetOrderbooksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).GetOrderbooksStream(m, &apiGetOrderbooksStreamServer{stream})
}

type Api_GetOrderbooksStreamServer interface {
	Send(*GetOrderbooksStreamResponse) error
	grpc.ServerStream
}

type apiGetOrderbooksStreamServer struct {
	grpc.ServerStream
}

func (x *apiGetOrderbooksStreamServer) Send(m *GetOrderbooksStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Api_GetMarketDepthsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMarketDepthsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).GetMarketDepthsStream(m, &apiGetMarketDepthsStreamServer{stream})
}

type Api_GetMarketDepthsStreamServer interface {
	Send(*GetMarketDepthsStreamResponse) error
	grpc.ServerStream
}

type apiGetMarketDepthsStreamServer struct {
	grpc.ServerStream
}

func (x *apiGetMarketDepthsStreamServer) Send(m *GetMarketDepthsStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Api_GetTickersStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTickersStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).GetTickersStream(m, &apiGetTickersStreamServer{stream})
}

type Api_GetTickersStreamServer interface {
	Send(*GetTickersStreamResponse) error
	grpc.ServerStream
}

type apiGetTickersStreamServer struct {
	grpc.ServerStream
}

func (x *apiGetTickersStreamServer) Send(m *GetTickersStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Api_GetTradesStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTradesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).GetTradesStream(m, &apiGetTradesStreamServer{stream})
}

type Api_GetTradesStreamServer interface {
	Send(*GetTradesStreamResponse) error
	grpc.ServerStream
}

type apiGetTradesStreamServer struct {
	grpc.ServerStream
}

func (x *apiGetTradesStreamServer) Send(m *GetTradesStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Api_GetOrderStatusStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetOrderStatusStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).GetOrderStatusStream(m, &apiGetOrderStatusStreamServer{stream})
}

type Api_GetOrderStatusStreamServer interface {
	Send(*GetOrderStatusStreamResponse) error
	grpc.ServerStream
}

type apiGetOrderStatusStreamServer struct {
	grpc.ServerStream
}

func (x *apiGetOrderStatusStreamServer) Send(m *GetOrderStatusStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Api_GetRecentBlockHashStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRecentBlockHashRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).GetRecentBlockHashStream(m, &apiGetRecentBlockHashStreamServer{stream})
}

type Api_GetRecentBlockHashStreamServer interface {
	Send(*GetRecentBlockHashResponse) error
	grpc.ServerStream
}

type apiGetRecentBlockHashStreamServer struct {
	grpc.ServerStream
}

func (x *apiGetRecentBlockHashStreamServer) Send(m *GetRecentBlockHashResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Api_GetBlockStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBlockStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).GetBlockStream(m, &apiGetBlockStreamServer{stream})
}

type Api_GetBlockStreamServer interface {
	Send(*GetBlockStreamResponse) error
	grpc.ServerStream
}

type apiGetBlockStreamServer struct {
	grpc.ServerStream
}

func (x *apiGetBlockStreamServer) Send(m *GetBlockStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Api_GetPriorityFeeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPriorityFeeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).GetPriorityFeeStream(m, &apiGetPriorityFeeStreamServer{stream})
}

type Api_GetPriorityFeeStreamServer interface {
	Send(*GetPriorityFeeResponse) error
	grpc.ServerStream
}

type apiGetPriorityFeeStreamServer struct {
	grpc.ServerStream
}

func (x *apiGetPriorityFeeStreamServer) Send(m *GetPriorityFeeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Api_GetBundleTipStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBundleTipRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).GetBundleTipStream(m, &apiGetBundleTipStreamServer{stream})
}

type Api_GetBundleTipStreamServer interface {
	Send(*GetBundleTipResponse) error
	grpc.ServerStream
}

type apiGetBundleTipStreamServer struct {
	grpc.ServerStream
}

func (x *apiGetBundleTipStreamServer) Send(m *GetBundleTipResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Api_GetQuotesStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetQuotesStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).GetQuotesStream(m, &apiGetQuotesStreamServer{stream})
}

type Api_GetQuotesStreamServer interface {
	Send(*GetQuotesStreamResponse) error
	grpc.ServerStream
}

type apiGetQuotesStreamServer struct {
	grpc.ServerStream
}

func (x *apiGetQuotesStreamServer) Send(m *GetQuotesStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Api_GetPoolReservesStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPoolReservesStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).GetPoolReservesStream(m, &apiGetPoolReservesStreamServer{stream})
}

type Api_GetPoolReservesStreamServer interface {
	Send(*GetPoolReservesStreamResponse) error
	grpc.ServerStream
}

type apiGetPoolReservesStreamServer struct {
	grpc.ServerStream
}

func (x *apiGetPoolReservesStreamServer) Send(m *GetPoolReservesStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Api_GetPricesStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPricesStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).GetPricesStream(m, &apiGetPricesStreamServer{stream})
}

type Api_GetPricesStreamServer interface {
	Send(*GetPricesStreamResponse) error
	grpc.ServerStream
}

type apiGetPricesStreamServer struct {
	grpc.ServerStream
}

func (x *apiGetPricesStreamServer) Send(m *GetPricesStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Api_GetNewRaydiumPoolsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetNewRaydiumPoolsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).GetNewRaydiumPoolsStream(m, &apiGetNewRaydiumPoolsStreamServer{stream})
}

type Api_GetNewRaydiumPoolsStreamServer interface {
	Send(*GetNewRaydiumPoolsResponse) error
	grpc.ServerStream
}

type apiGetNewRaydiumPoolsStreamServer struct {
	grpc.ServerStream
}

func (x *apiGetNewRaydiumPoolsStreamServer) Send(m *GetNewRaydiumPoolsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Api_GetSwapsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSwapsStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).GetSwapsStream(m, &apiGetSwapsStreamServer{stream})
}

type Api_GetSwapsStreamServer interface {
	Send(*GetSwapsStreamResponse) error
	grpc.ServerStream
}

type apiGetSwapsStreamServer struct {
	grpc.ServerStream
}

func (x *apiGetSwapsStreamServer) Send(m *GetSwapsStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Api_ServiceDesc is the grpc.ServiceDesc for Api service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Api_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRateLimit",
			Handler:    _Api_GetRateLimit_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _Api_GetTransaction_Handler,
		},
		{
			MethodName: "PostSubmitV2",
			Handler:    _Api_PostSubmitV2_Handler,
		},
		{
			MethodName: "PostSubmitBatchV2",
			Handler:    _Api_PostSubmitBatchV2_Handler,
		},
		{
			MethodName: "GetRaydiumPools",
			Handler:    _Api_GetRaydiumPools_Handler,
		},
		{
			MethodName: "GetRaydiumPoolReserve",
			Handler:    _Api_GetRaydiumPoolReserve_Handler,
		},
		{
			MethodName: "GetRaydiumQuotes",
			Handler:    _Api_GetRaydiumQuotes_Handler,
		},
		{
			MethodName: "GetRaydiumPrices",
			Handler:    _Api_GetRaydiumPrices_Handler,
		},
		{
			MethodName: "PostRaydiumSwap",
			Handler:    _Api_PostRaydiumSwap_Handler,
		},
		{
			MethodName: "PostRaydiumRouteSwap",
			Handler:    _Api_PostRaydiumRouteSwap_Handler,
		},
		{
			MethodName: "GetJupiterQuotes",
			Handler:    _Api_GetJupiterQuotes_Handler,
		},
		{
			MethodName: "GetJupiterPrices",
			Handler:    _Api_GetJupiterPrices_Handler,
		},
		{
			MethodName: "PostJupiterSwap",
			Handler:    _Api_PostJupiterSwap_Handler,
		},
		{
			MethodName: "PostJupiterSwapInstructions",
			Handler:    _Api_PostJupiterSwapInstructions_Handler,
		},
		{
			MethodName: "PostJupiterRouteSwap",
			Handler:    _Api_PostJupiterRouteSwap_Handler,
		},
		{
			MethodName: "GetMarketsV2",
			Handler:    _Api_GetMarketsV2_Handler,
		},
		{
			MethodName: "GetTickersV2",
			Handler:    _Api_GetTickersV2_Handler,
		},
		{
			MethodName: "GetOrderbookV2",
			Handler:    _Api_GetOrderbookV2_Handler,
		},
		{
			MethodName: "GetMarketDepthV2",
			Handler:    _Api_GetMarketDepthV2_Handler,
		},
		{
			MethodName: "PostOrderV2",
			Handler:    _Api_PostOrderV2_Handler,
		},
		{
			MethodName: "PostCancelOrderV2",
			Handler:    _Api_PostCancelOrderV2_Handler,
		},
		{
			MethodName: "PostReplaceOrderV2",
			Handler:    _Api_PostReplaceOrderV2_Handler,
		},
		{
			MethodName: "PostSettleV2",
			Handler:    _Api_PostSettleV2_Handler,
		},
		{
			MethodName: "GetOpenOrdersV2",
			Handler:    _Api_GetOpenOrdersV2_Handler,
		},
		{
			MethodName: "GetUnsettledV2",
			Handler:    _Api_GetUnsettledV2_Handler,
		},
		{
			MethodName: "GetPrice",
			Handler:    _Api_GetPrice_Handler,
		},
		{
			MethodName: "GetMarkets",
			Handler:    _Api_GetMarkets_Handler,
		},
		{
			MethodName: "GetPools",
			Handler:    _Api_GetPools_Handler,
		},
		{
			MethodName: "GetTickers",
			Handler:    _Api_GetTickers_Handler,
		},
		{
			MethodName: "GetKline",
			Handler:    _Api_GetKline_Handler,
		},
		{
			MethodName: "GetOrderbook",
			Handler:    _Api_GetOrderbook_Handler,
		},
		{
			MethodName: "GetMarketDepth",
			Handler:    _Api_GetMarketDepth_Handler,
		},
		{
			MethodName: "GetTrades",
			Handler:    _Api_GetTrades_Handler,
		},
		{
			MethodName: "GetQuotes",
			Handler:    _Api_GetQuotes_Handler,
		},
		{
			MethodName: "GetServerTime",
			Handler:    _Api_GetServerTime_Handler,
		},
		{
			MethodName: "GetRecentBlockHash",
			Handler:    _Api_GetRecentBlockHash_Handler,
		},
		{
			MethodName: "GetPriorityFee",
			Handler:    _Api_GetPriorityFee_Handler,
		},
		{
			MethodName: "GetAccountBalance",
			Handler:    _Api_GetAccountBalance_Handler,
		},
		{
			MethodName: "GetTokenAccounts",
			Handler:    _Api_GetTokenAccounts_Handler,
		},
		{
			MethodName: "GetAccountBalanceV2",
			Handler:    _Api_GetAccountBalanceV2_Handler,
		},
		{
			MethodName: "PostOrder",
			Handler:    _Api_PostOrder_Handler,
		},
		{
			MethodName: "PostSubmit",
			Handler:    _Api_PostSubmit_Handler,
		},
		{
			MethodName: "PostSubmitBatch",
			Handler:    _Api_PostSubmitBatch_Handler,
		},
		{
			MethodName: "PostCancelOrder",
			Handler:    _Api_PostCancelOrder_Handler,
		},
		{
			MethodName: "PostCancelByClientOrderID",
			Handler:    _Api_PostCancelByClientOrderID_Handler,
		},
		{
			MethodName: "PostCancelAll",
			Handler:    _Api_PostCancelAll_Handler,
		},
		{
			MethodName: "PostReplaceByClientOrderID",
			Handler:    _Api_PostReplaceByClientOrderID_Handler,
		},
		{
			MethodName: "PostReplaceOrder",
			Handler:    _Api_PostReplaceOrder_Handler,
		},
		{
			MethodName: "PostSettle",
			Handler:    _Api_PostSettle_Handler,
		},
		{
			MethodName: "PostTradeSwap",
			Handler:    _Api_PostTradeSwap_Handler,
		},
		{
			MethodName: "GetOrders",
			Handler:    _Api_GetOrders_Handler,
		},
		{
			MethodName: "GetOpenOrders",
			Handler:    _Api_GetOpenOrders_Handler,
		},
		{
			MethodName: "GetOrderByID",
			Handler:    _Api_GetOrderByID_Handler,
		},
		{
			MethodName: "GetBundleResultV2",
			Handler:    _Api_GetBundleResultV2_Handler,
		},
		{
			MethodName: "GetUnsettled",
			Handler:    _Api_GetUnsettled_Handler,
		},
		{
			MethodName: "PostRouteTradeSwap",
			Handler:    _Api_PostRouteTradeSwap_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetOrderbooksStream",
			Handler:       _Api_GetOrderbooksStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMarketDepthsStream",
			Handler:       _Api_GetMarketDepthsStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTickersStream",
			Handler:       _Api_GetTickersStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTradesStream",
			Handler:       _Api_GetTradesStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetOrderStatusStream",
			Handler:       _Api_GetOrderStatusStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetRecentBlockHashStream",
			Handler:       _Api_GetRecentBlockHashStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetBlockStream",
			Handler:       _Api_GetBlockStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPriorityFeeStream",
			Handler:       _Api_GetPriorityFeeStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetBundleTipStream",
			Handler:       _Api_GetBundleTipStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetQuotesStream",
			Handler:       _Api_GetQuotesStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPoolReservesStream",
			Handler:       _Api_GetPoolReservesStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPricesStream",
			Handler:       _Api_GetPricesStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetNewRaydiumPoolsStream",
			Handler:       _Api_GetNewRaydiumPoolsStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSwapsStream",
			Handler:       _Api_GetSwapsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
